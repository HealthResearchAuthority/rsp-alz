targetScope = 'subscription'

// ------------------
//    PARAMETERS
// ------------------
@description('The name of the workload that is being deployed. Up to 10 characters long.')
@minLength(2)
@maxLength(10)
param workloadName string = 'aca-lza'

@description('The location where the resources will be created.')
param location string =  deployment().location

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

//Hub
param hubVNetId string = '/subscriptions/15642d2a-27a2-4ee8-9eba-788bf7223d95/resourceGroups/rg-hra-connectivity/providers/Microsoft.Network/virtualHubs/vhub-rsp-uksouth'

@description('Virtual Appliance IP Address. Firewall IP Address')
param networkApplianceIpAddress string = '10.0.64.4' //Hub firewall IP Address


// Spoke
@description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')
param spokeResourceGroupName string = ''

@description('Central Log Analytics Workspace ID')
param logAnalyticsWorkspaceId string = '9555d5c1-d493-4666-8a25-4ab7d506b061'

@description('Enable or disable the deployment of the Hello World Sample App. If disabled, the Application Gateway will not be deployed.')
param deployHelloWorldSample bool

@description('The FQDN of the Application Gateway. Must match the TLS Certificate.')
param applicationGatewayFqdn string

@description('Enable or disable Application Gateway Certificate (PFX).')
param enableApplicationGatewayCertificate bool

@description('The name of the certificate key to use for Application Gateway certificate.')
param applicationGatewayCertificateKeyName string

// @description('Enable usage and telemetry feedback to Microsoft.')
// param enableTelemetry bool = true

// @description('Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false.')
// param deployZoneRedundantResources bool = true


type spokesType = ({
  @description('SubscriptionId for spokeNetworking')
  subscriptionId: string

  @description('Address prefix (CIDR) for spokeNetworking')
  ipRange: string

  @description('managementGroup for subscription placement')
  workloadName: string

  @description('Subnet information')
  subnets: object

  @description('Name of environment')
  parEnvironment: string

  @description('Name of environment')
  rgSpokeName: string

  @description('Name of environment')
  zoneRedundancy: bool

  @description('Name of environment. Allowed Valued: "Disabled","Enabled", "VirtualNetworkInherited", "null"')
  ddosProtectionEnabled: string
  
})[]

@description('Optional, default value is true. If true, Azure Policies will be deployed')
param deployAzurePolicies bool = true

param parSpokeNetworks spokesType = [
  {
    subscriptionId: 'b83b4631-b51b-4961-86a1-295f539c826b' //Development
    ipRange: '10.1.0.0/16'
    parEnvironment: 'dev'
    workloadName: 'container-app'
    zoneRedundancy: false
    ddosProtectionEnabled: 'Enabled'
    rgSpokeName: !empty(spokeResourceGroupName) ? spokeResourceGroupName : 'rg-rsp-${workloadName}-spoke-dev-uks'
    subnets: {
      infraSubnet: {
        addressPrefix: '10.1.0.0/18'
      }
      appGatewaySubnet: {
        addressPrefix: '10.1.64.0/24'
      }
      privateEndPointSubnet: {
        addressPrefix: '10.1.65.0/24'
      }
    }
  }
]

// ------------------
// VARIABLES
// ------------------

var varVirtualHubResourceGroup = (!empty(hubVNetId) && contains(hubVNetId, '/providers/Microsoft.Network/virtualHubs/') ? split(hubVNetId, '/')[4] : '')
var varVirtualHubSubscriptionId = (!empty(hubVNetId) && contains(hubVNetId, '/providers/Microsoft.Network/virtualHubs/') ? split(hubVNetId, '/')[2] : '')
var varVirtualHubResourceId = (!empty(hubVNetId) && contains(hubVNetId, '/providers/Microsoft.Network/virtualHubs/') ? hubVNetId : '')
var varHubVirtualNetworkName = (!empty(hubVNetId) && contains(hubVNetId, '/providers/Microsoft.Network/virtualHubs/') ? split(hubVNetId, '/')[8] : '')

// ------------------
// RESOURCES
// ------------------

resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2020-06-01' = [for i in range(0, length(parSpokeNetworks)): {
  name: parSpokeNetworks[i].rgSpokeName
  location: location
  tags: tags
}]

module spoke 'modules/02-spoke/deploy.spoke.bicep' = [for i in range(0, length(parSpokeNetworks)): {
  name: take('spoke-${deployment().name}-deployment-${i}', 64)
  scope: subscription(parSpokeNetworks[i].subscriptionId)
  params: {
    spokeResourceGroupName: spokeResourceGroup[i].name
    location: location
    tags: tags
    environment: parSpokeNetworks[i].parEnvironment
    workloadName: workloadName
    spokeApplicationGatewaySubnetAddressPrefix: parSpokeNetworks[i].subnets.infraSubnet.addressPrefix
    spokeInfraSubnetAddressPrefix: parSpokeNetworks[i].subnets.appGatewaySubnet.addressPrefix
    spokePrivateEndpointsSubnetAddressPrefix: parSpokeNetworks[i].subnets.privateEndPointSubnet.addressPrefix
    spokeVNetAddressPrefixes: [parSpokeNetworks[i].ipRange]
    networkApplianceIpAddress: networkApplianceIpAddress
    deployAzurePolicies: deployAzurePolicies
    logAnalyticsWorkspaceId: logAnalyticsWorkspaceId
    hubResourceGroupName: varVirtualHubResourceGroup
    hubSubscriptionId: varVirtualHubSubscriptionId
    parVirtualHubResourceId: varVirtualHubResourceId
  }
}]

module supportingServices 'modules/03-supporting-services/deploy.supporting-services.bicep' = [for i in range(0, length(parSpokeNetworks)):  {
  name: take('supportingServices-${deployment().name}-deployment-${i}', 64)
  scope: resourceGroup(parSpokeNetworks[i].rgSpokeName)
  params: {
    location: location
    tags: tags
    spokePrivateEndpointSubnetName: spoke[i].outputs.spokePrivateEndpointsSubnetName
    environment: parSpokeNetworks[i].parEnvironment
    workloadName: workloadName
    spokeVNetId: spoke[i].outputs.spokeVNetId
    hubVNetId: hubVNetId
    logAnalyticsWorkspaceId: logAnalyticsWorkspaceId
    deployZoneRedundantResources: parSpokeNetworks[i].zoneRedundancy
  }
}]

module containerAppsEnvironment 'modules/04-container-apps-environment/deploy.aca-environment.bicep' = [for i in range(0, length(parSpokeNetworks)): {
  name: take('containerAppsEnvironment-${deployment().name}-deployment', 64)
  scope: resourceGroup(parSpokeNetworks[i].rgSpokeName)
  params: {
    location: location
    tags: tags
    environment: parSpokeNetworks[i].parEnvironment
    workloadName: workloadName
    spokeVNetName: spoke[i].outputs.spokeVNetName
    spokeInfraSubnetName: spoke[i].outputs.spokeInfraSubnetName
    enableApplicationInsights: true
    enableDaprInstrumentation: false
    enableTelemetry: false
    logAnalyticsWorkspaceId: logAnalyticsWorkspaceId
    hubResourceGroupName: varVirtualHubResourceGroup
    hubSubscriptionId: varVirtualHubSubscriptionId
    hubVNetName: varHubVirtualNetworkName
  }
}]

module helloWorlSampleApp 'modules/05-hello-world-sample-app/deploy.hello-world.bicep' = [for i in range(0, length(parSpokeNetworks)): {
  name: take('helloWorlSampleApp-${deployment().name}-deployment', 64)
  scope: resourceGroup(parSpokeNetworks[i].rgSpokeName)
  params: {
    location: location
    tags: tags
    containerRegistryUserAssignedIdentityId: supportingServices[i].outputs.containerRegistryUserAssignedIdentityId
    containerAppsEnvironmentId: containerAppsEnvironment[i].outputs.containerAppsEnvironmentId
  }
}]

module applicationGateway 'modules/06-application-gateway/deploy.app-gateway.bicep' = [for i in range(0, length(parSpokeNetworks)): {
  name: take('applicationGateway-${deployment().name}-deployment', 64)
  scope: resourceGroup(parSpokeNetworks[i].rgSpokeName)
  params: {
    location: location
    tags: tags
    environment: parSpokeNetworks[i].parEnvironment
    workloadName: workloadName
    applicationGatewayCertificateKeyName: applicationGatewayCertificateKeyName
    applicationGatewayFqdn: applicationGatewayFqdn
    applicationGatewayPrimaryBackendEndFqdn: (deployHelloWorldSample) ? helloWorlSampleApp[i].outputs.helloWorldAppFqdn : '' // To fix issue when hello world is not deployed
    applicationGatewaySubnetId: spoke[i].outputs.spokeApplicationGatewaySubnetId
    enableApplicationGatewayCertificate: enableApplicationGatewayCertificate
    keyVaultId: supportingServices[i].outputs.keyVaultId
    deployZoneRedundantResources: parSpokeNetworks[i].zoneRedundancy
    ddosProtectionMode: 'Disabled'
    applicationGatewayLogAnalyticsId: logAnalyticsWorkspaceId
  }
}]

// ------------------
// OUTPUTS
// ------------------

// Spoke
@description('The  resource ID of the Spoke Virtual Network.')
output spokeVNetIds array = [for i in range(0, length(parSpokeNetworks)): {
  Name: spoke[i].outputs.spokeVNetId
}]

@description('The name of the Spoke Virtual Network.')
output spokeVnetNames array = [for i in range(0, length(parSpokeNetworks)): {
  Name: spoke[i].outputs.spokeVNetName
}]

@description('The resource ID of the Spoke Infrastructure Subnet.')
output spokeInfraSubnetIds array = [for i in range(0, length(parSpokeNetworks)): {
  Name: spoke[i].outputs.spokeInfraSubnetId
}]

@description('The name of the Spoke Infrastructure Subnet.')
output spokeInfraSubnetNames array = [for i in range(0, length(parSpokeNetworks)): {
  Name: spoke[i].outputs.spokeInfraSubnetName
}]

@description('The name of the Spoke Private Endpoints Subnet.')
output spokePrivateEndpointsSubnetNames array = [for i in range(0, length(parSpokeNetworks)): {
  Name: spoke[i].outputs.spokePrivateEndpointsSubnetName
}]

@description('The resource ID of the Spoke Application Gateway Subnet. If "spokeApplicationGatewaySubnetAddressPrefix" is empty, the subnet will not be created and the value returned is empty.')
output spokeApplicationGatewaySubnetIds array = [for i in range(0, length(parSpokeNetworks)): {
  Name: spoke[i].outputs.spokeApplicationGatewaySubnetId
}]

@description('The name of the Spoke Application Gateway Subnet.  If "spokeApplicationGatewaySubnetAddressPrefix" is empty, the subnet will not be created and the value returned is empty.')
output spokeApplicationGatewaySubnetNames array = [for i in range(0, length(parSpokeNetworks)): {
  Name: spoke[i].outputs.spokeApplicationGatewaySubnetName
}]

// Supporting Services
@description('The resource ID of the container registry.')
output containerRegistryIds array = [for i in range(0, length(parSpokeNetworks)): {
  Name: supportingServices[i].outputs.containerRegistryId
}]

@description('The name of the container registry.')
output containerRegistryNames array = [for i in range(0, length(parSpokeNetworks)): {
  Name: supportingServices[i].outputs.containerRegistryName
}]

@description('The name of the container registry login server.')
output containerRegistryLoginServers array = [for i in range(0, length(parSpokeNetworks)): {
  Name: supportingServices[i].outputs.containerRegistryLoginServer
}]

@description('The resource ID of the user assigned managed identity for the container registry to be able to pull images from it.')
output containerRegistryUserAssignedIdentityIds array = [for i in range(0, length(parSpokeNetworks)): {
  Name: supportingServices[i].outputs.containerRegistryUserAssignedIdentityId
}]

@description('The resource ID of the key vault.')
output keyVaultIds array = [for i in range(0, length(parSpokeNetworks)): {
  Name: supportingServices[i].outputs.keyVaultId
}]

@description('The name of the key vault.')
output keyVaultNames array = [for i in range(0, length(parSpokeNetworks)): {
  Name: supportingServices[i].outputs.keyVaultName
}]

// Container Apps Environment
// @description('The resource ID of the container apps environment.')
// output containerAppsEnvironmentId string = containerAppsEnvironment.outputs.containerAppsEnvironmentId

// @description('The name of the container apps environment.')
// output containerAppsEnvironmentName string = containerAppsEnvironment.outputs.containerAppsEnvironmentName

// @description(' The name of application Insights instance.')
// output applicationInsightsName string =  (enableApplicationInsights)? containerAppsEnvironment.outputs.applicationInsightsName : ''
