# This workflow will deploy the application resources
name: application-deployment
trigger:
  - main

parameters:
  - name: env
    displayName: Environment
    type: string
    default: dev
    values:
      - dev
      - systemtest_manual
      - systemtest_auto
      - systemtest_int
      - uat
      - pre_prod
      - production

jobs:
  - job: setup
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - bash: | 
          ipaddress=$(curl -s http://ipinfo.io/ip)
          ipaddressipify=$(curl -s https://api.ipify.org)
          echo "##vso[task.setvariable variable=ipaddress;isOutput=true;]$ipaddress"
          echo "##vso[task.setvariable variable=ipaddressipify;isOutput=true;]$ipaddressipify"
        name: fetchPublicIP

  - job: lint
    dependsOn: setup
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
      - bash: |
          az bicep install
          az bicep version
        displayName: 'Install Bicep CLI'
      - bash: az bicep build --file ./5.spoke-network/main.application.bicep

  - job: validate
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: [setup, lint]
    variables:
      - name: devOpsPublicIP
        value: $[dependencies.setup.outputs['fetchPublicIP.ipaddress']]
      - group: ${{ parameters.env }}
    steps:
      - checkout: self
      - task: AzureCLI@2
        inputs:
          azureSubscription: $(${{ parameters.env }})
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub validate --name "App-$(Build.BuildId)" --location $(location) --template-file ./5.spoke-network/main.application.bicep \
              --parameters ./5.spoke-network/app-parameters/${{ parameters.env }}.parameters.bicepparam \
                           parAdminLogin=$(rspsqladminloginname) parSqlAdminPhrase=$(rspsqladminphrase) \
                           parClientID=$(clientID) parClientSecret=$(clientSecret) parDevOpsPublicIPAddress=$(devOpsPublicIP)

  - job: preview
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: [setup, lint, validate]
    variables:
      - name: devOpsPublicIP
        value: $[dependencies.setup.outputs['fetchPublicIP.ipaddress']]
      - group: ${{ parameters.env }}
    steps:
      - checkout: self
      - task: AzureCLI@2
        inputs:
          azureSubscription: $(${{ parameters.env }})
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub what-if --location $(location) --template-file ./5.spoke-network/main.application.bicep \
              --parameters ./5.spoke-network/app-parameters/${{ parameters.env }}.parameters.bicepparam \
                           parAdminLogin=$(rspsqladminloginname) parSqlAdminPhrase=$(rspsqladminphrase) \
                           parClientID=$(clientID) parClientSecret=$(clientSecret) parDevOpsPublicIPAddress=$(devOpsPublicIP)

  - job: deploy
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: [setup, lint, validate, preview]
    variables:
      - name: devOpsPublicIP
        value: $[dependencies.setup.outputs['fetchPublicIP.ipaddress']]
      - name: devOpsIPIFYPublicIP
        value: $[dependencies.setup.outputs['fetchPublicIP.ipaddressipify']]
      - group: ${{ parameters.env }}
    steps:
      - checkout: self
      - bash: echo "Azure DevOps Public IP Address is $(devOpsPublicIP)"
      - bash: echo "Azure DevOps Public IP Address from IPIFY is $(devOpsIPIFYPublicIP)"
      - task: AzureCLI@2
        name: deploy
        inputs:
          azureSubscription: $(${{ parameters.env }})
          scriptType: bash
          scriptLocation: inlineScript
          failOnStandardError: true
          inlineScript: |
            az config set bicep.use_binary_from_path=false --only-show-errors
            output=$(az stack sub create --name "application-deployment-stack" --location $(location) --template-file ./5.spoke-network/main.application.bicep  \
              --parameters ./5.spoke-network/app-parameters/${{ parameters.env }}.parameters.bicepparam \
                           parAdminLogin=$(rspsqladminloginname) parSqlAdminPhrase=$(rspsqladminphrase) \
                           parClientID=$(clientID) parClientSecret=$(clientSecret) parDevOpsPublicIPAddress=$(devOpsPublicIP) \
                           --deny-settings-mode none --action-on-unmanage deleteResources --yes)
            echo $output | jq .
            appResourceGroup=$(echo $output | jq -r '.properties.outputs.appResourceGroupName.value')
            echo "##vso[task.setvariable variable=appResourceGroupName;isoutput=true]$appResourceGroup"

  # - job: delete
  #   pool:
  #     vmImage: 'ubuntu-latest'
  #   dependsOn: [lint]
  #   steps:
  #     - checkout: self
  #     - task: AzureCLI@2
  #       name: delete
  #       inputs:
  #         azureSubscription: $(azureServiceConnection)
  #         scriptType: bash
  #         scriptLocation: inlineScript
  #         failOnStandardError: true
  #         inlineScript: |
  #           az stack sub delete --name "application-deployment-stack" --action-on-unmanage deleteResources --yes