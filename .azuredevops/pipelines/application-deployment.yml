# This workflow will deploy the application resources
name: application-deployment
trigger: none
pr:
  branches:
    include:
      - main
  paths:
    include:
      - '5.spoke-network/main.application.bicep'
      - '5.spoke-network/app-parameters/**'

parameters:
  - name: env
    displayName: Environment
    type: string
    default: dev
    values:
      - dev
      - systemtest_manual
      - systemtest_auto
      - systemtest_int
      - uat
      - pre_prod
      - production

stages:
  - stage: PRValidation
    displayName: 'PR Validation Application Deployment'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: setup
        displayName: 'Get Devops Public IP'
        pool:
          name: rsp-manageddevopspool
        steps:
          - bash: | 
              ipaddress=$(curl -s http://ipinfo.io/ip)
              ipaddressipify=$(curl -s https://api.ipify.org)
              echo "##vso[task.setvariable variable=ipaddress;isOutput=true;]$ipaddress"
              echo "##vso[task.setvariable variable=ipaddressipify;isOutput=true;]$ipaddressipify"
            name: fetchPublicIP

      - job: lint
        displayName: 'Lint Application Templates'
        dependsOn: setup
        pool:
          name: rsp-manageddevopspool
        steps:
          - checkout: self
          - script: |
              echo "Installing Azure CLI..."
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            displayName: 'Install Azure CLI'
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - bash: az bicep build --file ./5.spoke-network/main.application.bicep
      
      - job: SAST
        displayName: 'SAST Analysis'
        pool:
          name: rsp-manageddevopspool
        dependsOn: setup
        steps:
        - checkout: self
        - task: MicrosoftSecurityDevOps@1
          displayName: 'Run SAST Analysis'
          inputs:
            tools: 'checkov,templateanalyzer'
            artifactName: 'CodeAnalysisLogs'
        

      - job: validate
        displayName: 'Validate Application Deployment'
        pool:
          name: rsp-manageddevopspool
        dependsOn: [setup, lint, SAST]
        condition: succeeded()
        variables:
          - name: devOpsPublicIP
            value: $[dependencies.setup.outputs['fetchPublicIP.ipaddress']]
          - group: ${{ parameters.env }}
        steps:
          - checkout: self
          - script: |
              echo "Installing Azure CLI..."
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            displayName: 'Install Azure CLI'
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(${{ parameters.env }})
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment sub validate --name "App-$(Build.BuildId)" --location $(location) --template-file ./5.spoke-network/main.application.bicep \
                  --parameters ./5.spoke-network/app-parameters/${{ parameters.env }}.parameters.bicepparam \
                              parAdminLogin=$(rspsqladminloginname) parSqlAdminPhrase=$(rspsqladminphrase) \
                              parClientID=$(clientID) parClientSecret=$(clientSecret) \
                              logAnalyticsWorkspaceId=$(logAnalyticsWorkspaceId) parDevOpsPublicIPAddress=$(devOpsPublicIP) \
                              parStorageAccountName=$(documentBlobstorageAccountName) parStorageAccountKey=$(documentBlobstorageAccountKey) \
                              paramWhitelistIPs=$(parWhitelistIPs) \
                              parClarityProjectId=$(clarityProjectId)

      - job: preview
        displayName: 'Preview Application Deployment'
        pool:
          name: rsp-manageddevopspool
        dependsOn: [setup, lint, validate]
        condition: succeeded()
        variables:
          - name: devOpsPublicIP
            value: $[dependencies.setup.outputs['fetchPublicIP.ipaddress']]
          - group: ${{ parameters.env }}
        steps:
          - checkout: self
          - script: |
              echo "Installing Azure CLI..."
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            displayName: 'Install Azure CLI'
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(${{ parameters.env }})
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment sub what-if --location $(location) --template-file ./5.spoke-network/main.application.bicep \
                  --parameters ./5.spoke-network/app-parameters/${{ parameters.env }}.parameters.bicepparam \
                              parAdminLogin=$(rspsqladminloginname) parSqlAdminPhrase=$(rspsqladminphrase) \
                              parClientID=$(clientID) parClientSecret=$(clientSecret) \
                              logAnalyticsWorkspaceId=$(logAnalyticsWorkspaceId) parDevOpsPublicIPAddress=$(devOpsPublicIP) \
                              parStorageAccountName=$(documentBlobstorageAccountName) parStorageAccountKey=$(documentBlobstorageAccountKey) \
                              paramWhitelistIPs=$(parWhitelistIPs) \
                              parClarityProjectId=$(clarityProjectId)


  - stage: ManualDeployment
    displayName: 'Manual Deployment of Applications'
    dependsOn: []
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: setup
        displayName: 'Get DevOps Public IP'
        pool:
          name: rsp-manageddevopspool
        steps:
          - bash: | 
              ipaddress=$(curl -s http://ipinfo.io/ip)
              ipaddressipify=$(curl -s https://api.ipify.org)
              echo "##vso[task.setvariable variable=ipaddress;isOutput=true;]$ipaddress"
              echo "##vso[task.setvariable variable=ipaddressipify;isOutput=true;]$ipaddressipify"
            name: fetchPublicIP
            displayName: 'Fetch Public IP'

      - job: FinalWhatIf
        displayName: 'Run What-If before Deployment'
        dependsOn: [setup]
        condition: succeeded()
        pool: 
          name: rsp-manageddevopspool
        variables:
          - name: devOpsPublicIP
            value: $[dependencies.setup.outputs['fetchPublicIP.ipaddress']]
          - group: ${{ parameters.env }}
        steps:
          - checkout: self
          - script: |
              echo "Installing Azure CLI..."
              curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            displayName: 'Install Azure CLI'
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'

          - task: AzureCLI@2
            displayName: 'Final What-If' 
            inputs: 
              azureSubscription: $(${{ parameters.env }})
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment sub what-if --location $(location) --template-file ./5.spoke-network/main.application.bicep \
                  --parameters ./5.spoke-network/app-parameters/${{ parameters.env }}.parameters.bicepparam \
                              parAdminLogin=$(rspsqladminloginname) parSqlAdminPhrase=$(rspsqladminphrase) \
                              parClientID=$(clientID) parClientSecret=$(clientSecret) \
                              logAnalyticsWorkspaceId=$(logAnalyticsWorkspaceId) parDevOpsPublicIPAddress=$(devOpsPublicIP) \
                              parStorageAccountName=$(documentBlobstorageAccountName) parStorageAccountKey=$(documentBlobstorageAccountKey) \
                              paramWhitelistIPs=$(parWhitelistIPs) parClarityProjectId=$(clarityProjectId)

      - deployment: deploy
        displayName: 'Deploy Applications'
        pool:
          name: rsp-manageddevopspool
        dependsOn: [setup, FinalWhatIf]
        condition: succeeded()
        environment: 'alz-bicep-deployment'
        variables:
          - name: devOpsPublicIP
            value: $[dependencies.setup.outputs['fetchPublicIP.ipaddress']]
          - name: devOpsIPIFYPublicIP
            value: $[dependencies.setup.outputs['fetchPublicIP.ipaddressipify']]
          - group: ${{ parameters.env }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - script: |
                    echo "Installing Azure CLI..."
                    curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash 
                  displayName: 'Install Azure CLI'
                - bash: |
                    az bicep install
                    az bicep version
                  displayName: 'Install Bicep CLI'
                - bash: echo "Azure DevOps Public IP Address is $(devOpsPublicIP)"
                - bash: echo "Azure DevOps Public IP Address from IPIFY is $(devOpsIPIFYPublicIP)"

                - task: AzureCLI@2
                  name: deploy
                  displayName: 'Deploy Applications'
                  inputs:
                    azureSubscription: $(${{ parameters.env }})
                    scriptType: bash
                    scriptLocation: inlineScript
                    failOnStandardError: true
                    inlineScript: |
                      az config set bicep.use_binary_from_path=false --only-show-errors
                      output=$(az stack sub create --name "application-deployment-stack" --location $(location) --template-file ./5.spoke-network/main.application.bicep  \
                        --parameters ./5.spoke-network/app-parameters/${{ parameters.env }}.parameters.bicepparam \
                                    parAdminLogin=$(rspsqladminloginname) parSqlAdminPhrase=$(rspsqladminphrase) \
                                    parClientID=$(clientID) parClientSecret=$(clientSecret) \
                                    logAnalyticsWorkspaceId=$(logAnalyticsWorkspaceId) parDevOpsPublicIPAddress=$(devOpsPublicIP) \
                                    parStorageAccountName=$(documentBlobstorageAccountName) parStorageAccountKey=$(documentBlobstorageAccountKey) \
                                    paramWhitelistIPs=$(parWhitelistIPs) \
                                    parClarityProjectId=$(clarityProjectId) \
                                    --deny-settings-mode none --action-on-unmanage deleteResources --yes)
                      echo $output | jq .
                      appResourceGroup=$(echo $output | jq -r '.properties.outputs.appResourceGroupName.value')
                      echo "##vso[task.setvariable variable=appResourceGroupName;isoutput=true]$appResourceGroup"
