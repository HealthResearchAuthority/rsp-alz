# This workflow will deploy the LZA in ADO
name: 1.core-service-lza-deployment

trigger: none
pr:
  branches:
    include:
      - main
  paths:
    include:
      - '1.core-services/**'


stages:
  - stage: PRValidation
    displayName: 'PR Validation for Core Services'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      # The lint job performs linting on the bicep code
      - job: lint
        displayName: 'Lint Core Services Templates'
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - bash: az bicep build --file ./1.core-services/main.bicep

      - job: SAST
        displayName: 'SAST Analysis'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - checkout: self
        - task: MicrosoftSecurityDevOps@1
          displayName: 'Run SAST Analysis'
          inputs:
            tools: 'checkov,templateanalyzer'
          workingDirectory: '1.core-services'

      - job: validate
        displayName: 'Validate Core Services Deployment'
        pool: 
          vmImage: 'ubuntu-latest'
        dependsOn: [lint, SAST]
        condition: succeeded()
        steps:
          - checkout: self
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment mg validate --name "ACA-$(Build.BuildId)" --location $(location) --template-file ./1.core-services/main.bicep --management-group-id $(management-group-id) --parameters managementSubscriptionId=$(managementSubscriptionId)

      - job: preview
        displayName: 'Preview Core Services Deployment'
        pool: 
          vmImage: 'ubuntu-latest'
        dependsOn: [lint, validate]
        condition: succeeded()
        steps:
          - checkout: self
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - task: AzureCLI@2 
            inputs: 
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment mg what-if \
                  --location $(location) \
                  --template-file ./1.core-services/main.bicep \
                  --management-group-id $(management-group-id) \
                  --parameters managementSubscriptionId=$(managementSubscriptionId)

  - stage: ManualDeployment
    displayName: 'Manual Deployment for Core Services'
    dependsOn: []
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: FinalWhatIf
        displayName: 'Run What-If before Deployment'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'

          - task: AzureCLI@2 
            displayName: 'Final What-If'
            inputs: 
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              failOnStandardError: true
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment mg what-if \
                --location $(location) \
                --template-file ./1.core-services/main.bicep \
                --management-group-id $(management-group-id) \
                --parameters managementSubscriptionId=$(managementSubscriptionId)

      - deployment: deploy
        displayName: 'Deploy Core Services'
        pool:
          vmImage: 'ubuntu-latest'
        dependsOn: [FinalWhatIf]
        condition: succeeded()
        environment: 'alz-bicep-deployment'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - bash: |
                    az bicep install
                    az bicep version
                  displayName: 'Install Bicep CLI'

                - task: AzureCLI@2 
                  name: 'deploy'
                  displayName: 'Deploy Core Services'
                  inputs: 
                    azureSubscription: $(azureServiceConnection)
                    scriptType: bash
                    scriptLocation: inlineScript
                    failOnStandardError: true
                    inlineScript: |
                      az config set bicep.use_binary_from_path=false --only-show-errors
                      output=$(az deployment mg create \
                        --location $(location) \
                        --template-file ./1.core-services/main.bicep \
                        --management-group-id $(management-group-id) \
                        --parameters managementSubscriptionId=$(managementSubscriptionId))
                      echo $output | jq .
                      echo "##[section]"