# This workflow will deploy the LZA in ADO
name: 6.cross-subscription-lza-deployment

trigger: none
pr:
  branches:
    include:
      - main
  paths:
    include:
      - '6.cross-subscription/**'

variables:
  - group: 'CrossSubscription'  # Variable group with parameters for cross subscription connect to Keyvault

stages:
  - stage: PRValidation
    displayName: 'PR Validation for Cross Subscription'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    jobs:
      - job: lint
        displayName: 'Lint Cross Subscription Templates'
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - bash: az bicep build --file ./6.cross-subscription/main.bicep

      - job: validate
        displayName: 'Validate Cross Subscription Deployment'
        pool: 
          vmImage: 'ubuntu-latest'
        dependsOn: [lint]
        condition: succeeded()
        steps:
          - checkout: self
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment mg validate --name "ACA-$(Build.BuildId)" --location $(location) --management-group-id $(management-group-id) --template-file ./6.cross-subscription/main.bicep --parameters paramvnetPeeringsVNetIDs=$(paramvnetPeeringsVNetIDs) manageddevopspoolVnetID=$(manageddevopspoolVnetID) paramserviceIdsdev=$(serviceIdsdev) paramserviceIdsauto=$(serviceIdsauto)

      - job: preview
        displayName: 'Preview Cross Subscription Deployments'
        pool: 
          vmImage: 'ubuntu-latest'
        dependsOn: [lint, validate]
        condition: succeeded()
        steps:
          - checkout: self
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'
          - task: AzureCLI@2 
            inputs: 
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment mg what-if \
                  --location $(location) \
                  --template-file ./6.cross-subscription/main.bicep \
                  --management-group-id $(management-group-id) \
                  --parameters paramvnetPeeringsVNetIDs=$(paramvnetPeeringsVNetIDs) \
                        manageddevopspoolVnetID=$(manageddevopspoolVnetID) \
                        paramserviceIdsdev=$(serviceIdsdev) paramserviceIdsauto=$(serviceIdsauto) \
                        storageSubscriptionId="$(storageSubscriptionId)" \
                        devboxSubscriptionId="$(devboxSubscriptionId)"

  - stage: ManualDeployment
    displayName: 'Manual Deployment for Cross Subscription'
    dependsOn: []
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: setup
        displayName: 'Get Devops Public IP'
        steps:
          - bash: | 
              ipaddress=$(curl -s http://ipinfo.io/ip)
              ipaddressipify=$(curl -s https://api.ipify.org)
              echo "##vso[task.setvariable variable=ipaddress;isOutput=true;]$ipaddress"
              echo "##vso[task.setvariable variable=ipaddressipify;isOutput=true;]$ipaddressipify"
            name: fetchPublicIP
      - job: FinalWhatIf
        displayName: 'Run What-If before Deployment'
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - bash: |
              az bicep install
              az bicep version
            displayName: 'Install Bicep CLI'

          - task: AzureCLI@2
            displayName: 'Final What-If' 
            inputs: 
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az config set bicep.use_binary_from_path=false --only-show-errors
                az deployment mg what-if \
                  --location $(location) \
                  --template-file ./6.cross-subscription/main.bicep \
                  --management-group-id $(management-group-id) \
                  --parameters paramvnetPeeringsVNetIDs=$(paramvnetPeeringsVNetIDs) \
                        manageddevopspoolVnetID=$(manageddevopspoolVnetID) \
                        paramserviceIdsdev=$(serviceIdsdev) paramserviceIdsauto=$(serviceIdsauto) \
                        storageSubscriptionId="$(storageSubscriptionId)" \
                        devboxSubscriptionId="$(devboxSubscriptionId)"

      - deployment: deploy
        displayName: 'Deploy Cross Subscription'
        pool: 
          vmImage: 'ubuntu-latest'
        dependsOn: [FinalWhatIf]
        condition: succeeded()
        variables:
          - name: devOpsPublicIP
            value: $[dependencies.setup.outputs['fetchPublicIP.ipaddress']]
        environment: 'alz-bicep-deployment'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - bash: |
                    az bicep install
                    az bicep version
                  displayName: 'Install Bicep CLI'
                - task: AzureCLI@2
                  displayName: 'Deploy Cross Subscription'
                  name: deploy
                  inputs: 
                    azureSubscription: $(azureServiceConnection)
                    scriptType: bash
                    scriptLocation: inlineScript
                    failOnStandardError: true
                    inlineScript: |
                      az config set bicep.use_binary_from_path=false --only-show-errors
                      output=$(az deployment mg create \
                        --name "core-services-$(Build.BuildId)" \
                        --location $(location) \
                        --management-group-id $(management-group-id) \
                        --template-file ./6.cross-subscription/main.bicep \
                        --parameters paramvnetPeeringsVNetIDs=$(paramvnetPeeringsVNetIDs) \
                              manageddevopspoolVnetID=$(manageddevopspoolVnetID) \
                              paramserviceIdsdev=$(serviceIdsdev) paramserviceIdsauto=$(serviceIdsauto) \
                              storageSubscriptionId="$(storageSubscriptionId)" \
                              devboxSubscriptionId="$(devboxSubscriptionId)")
                      echo "Full Bicep Deployment Output:"
                      echo $output | jq .