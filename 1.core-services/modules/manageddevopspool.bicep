targetScope = 'resourceGroup'

@description('The name of the manageddevopspool virtual network resource group.')
param vnetName string

@description('The address prefixes for the spoke virtual network.')
param spokeVNetAddressPrefixes array

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

@description('CIDR of the spoke infrastructure subnet.')
param devopspoolSubnetPrefix string

@description('CIDR of the spoke infrastructure subnet.')
param devopspoolpepSubnetPrefix string

@description('Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template.')
param devopspoolSubnetName string

@description('The location where the resources will be created. This should be the same region as the hub.')
param location string = resourceGroup().location

@description('Central Log Analytics Workspace ID')
@secure()
param logAnalyticsWorkspaceId string

var defaultSubnets = [
  {
    name: devopspoolSubnetName
    properties: {
      addressPrefix: devopspoolSubnetPrefix
      delegations: [
        {
          name: 'devopsinfrapooldelegation'
          properties: {
            serviceName: 'Microsoft.DevOpsInfrastructure/pools'
          }
        }
      ]
    }
  }
  {
    name: 'snet-privateendpoints'
    properties: {
      addressPrefix: devopspoolpepSubnetPrefix
      networkSecurityGroup: {
        id: nsgPep.outputs.nsgId
      }
    }
  }]

  module networkingnaming '../../shared/bicep/naming/naming.module.bicep' = {
  name: take('management-devopspool-${deployment().name}', 64)
  params: {
    uniqueId: uniqueString(resourceGroup().id)
    environment: 'management'
    workloadName: 'networking'
    location: location
  }
}

@description('The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured.')
module vnetmanageddevopspool '../../shared/bicep/network/vnet.bicep' = {
  name: take('vnetdevopspool-${deployment().name}', 64)
  params: {
    name: vnetName
    location: location
    tags: tags
    subnets: defaultSubnets
    vnetAddressPrefixes: spokeVNetAddressPrefixes
  }
}

@description('NSG Rules for the private enpoint subnet.')
module nsgPep '../../shared/bicep/network/nsg.bicep' = {
  name: take('nsgPep-${deployment().name}', 64)
  params: {
    name: networkingnaming.outputs.resourcesNames.pepNsg
    location: location
    tags: tags
    securityRules: []
    diagnosticWorkspaceId: logAnalyticsWorkspaceId
  }
}

resource devcenter 'Microsoft.DevCenter/devcenters@2023-10-01-preview' = {
    name: 'dc-manageddevopspool'
    location: location
    properties: {}
}

resource project 'Microsoft.DevCenter/projects@2023-10-01-preview' = {
    name: 'project-manageddevopspool'
    properties: {
        description: 'DevOps Infrastructure Project'
        devCenterId: devcenter.id
    }
    location: location
}

resource vnetmanagedpool 'Microsoft.Network/virtualNetworks@2022-01-01' existing = {
  name: vnetName
}

resource reviewerRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
    name: guid(subscription().id, '6b652ad-7cc4-425b-bdc5-8d03faf23485', 'DevOpsInfrastructureReviewerRole')
    scope: vnetmanagedpool
    properties: {
        roleDefinitionId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7') // Reader
        principalId: 'f6b652ad-7cc4-425b-bdc5-8d03faf23485' // DevOps Infrastructure SP Object ID
        principalType: 'ServicePrincipal'
    }
}

resource networkContributorRole 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
    name: guid(subscription().id, '6b652ad-7cc4-425b-bdc5-8d03faf23485', 'DevOpsInfrastructurenetworkcontributorRole')
    scope: vnetmanagedpool
    properties: {
        roleDefinitionId: subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7') // Network Contributor
        principalId: 'f6b652ad-7cc4-425b-bdc5-8d03faf23485' // DevOps Infrastructure SP Object ID
        principalType: 'ServicePrincipal'
    }
}

resource manageddevopspool 'Microsoft.DevOpsInfrastructure/pools@2025-01-21' = {
  name: 'rsp-manageddevopspool'
  location: 'uksouth'
  properties: {
    provisioningState: 'Succeeded'
    organizationProfile: {
      organizations: [
        {
          url: 'https://dev.azure.com/FutureIRAS'
          projects: []
          parallelism: 4
          openAccess: false
        }
      ]
      kind: 'AzureDevOps'
    }
    devCenterProjectResourceId: project.id
    maximumConcurrency: 4
    agentProfile: {
      kind: 'Stateless'
    }
    fabricProfile: {
      sku: {
        name: 'Standard_D2ads_v5'
      }
      images: [
        {
          resourceId: '/Subscriptions/9ef9a127-7a6e-452e-b18d-d2e2e89ffa92/Providers/Microsoft.Compute/Locations/uksouth/Publishers/canonical/ArtifactTypes/VMImage/Offers/ubuntu-24_04-lts/Skus/server/versions/latest'
          buffer: '*'
        }
      ]
      osProfile: {
        logonType: 'Service'
      }
      storageProfile: {
        osDiskStorageAccountType: 'Standard'
        dataDisks: []
      }
      networkProfile: {
        subnetId: vnetmanageddevopspool.outputs.vnetSubnets[0].id
      }
      kind: 'Vmss'
    }
  }
}

