{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.1.11899",
      "templateHash": "8174371167154428212"
    }
  },
  "parameters": {
    "targetRgName": {
      "type": "string",
      "defaultValue": "HRA-Data-DataModelling"
    },
    "location": {
      "type": "string",
      "defaultValue": "uksouth"
    },
    "virtualMachines_HRA_Data_ERStudioDB_name": {
      "type": "string",
      "metadata": {
        "description": "Name of the ERStudioDB VM"
      }
    },
    "virtualMachines_HRA_Data_ERStudioApp_name": {
      "type": "string",
      "metadata": {
        "description": "Name of the ERStudioApp VM"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username for the VMs"
      }
    },
    "bastionHosts_HRA_Data_DataModellingBS_name": {
      "type": "string",
      "metadata": {
        "description": "Name of the Bastion Host for VM access"
      }
    },
    "publicIPAddresses_ERStudioDB_name": {
      "type": "string",
      "metadata": {
        "description": "Public IP Address name for ERStudioDB VM"
      }
    },
    "publicIPAddresses_ERStudioApp_name": {
      "type": "string",
      "metadata": {
        "description": "Public IP Address name for ERStudioDB VM"
      }
    },
    "networkInterfaces_hra_data_erstudiodb711_z1_name": {
      "type": "string",
      "metadata": {
        "description": "Network interface name for ERStudioDB VM"
      }
    },
    "networkInterfaces_hra_data_erstudioapp913_z1_name": {
      "type": "string",
      "metadata": {
        "description": "Network interface name for ERStudioApp VM"
      }
    },
    "networkSecurityGroups_HRA_Data_DataModelling_nsg_name": {
      "type": "string",
      "metadata": {
        "description": "NSG for VMs"
      }
    },
    "sqlVirtualMachines_HRA_Data_ERStudioDB_name": {
      "type": "string",
      "metadata": {
        "description": "SQL VM name for ERStudioApp"
      }
    },
    "publicIPAddresses_HRADataWarehouseVirtualNetwork_ip_name": {
      "type": "string",
      "metadata": {
        "description": "Public IP address for the Bastion Host"
      }
    },
    "virtualNetworks_HRADataWarehouseVirtualNetwork_name": {
      "type": "string",
      "metadata": {
        "description": "Name of the Data Warehouse Virtual Network"
      }
    },
    "bastionDnsName": {
      "type": "string",
      "metadata": {
        "description": "DNS hostname for Bastion Host"
      }
    },
    "harpSqlAdminLogin": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Admin username for the HARP Sync Database server"
      }
    },
    "harpSqlAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for the HARP Sync SQL Server"
      }
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Envrionment name (e.g dev, prod)"
      }
    },
    "harpSyncResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the resource group for HARP data sync resources"
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "The resource id of an existing Azure Log Analytics Workspace"
      }
    },
    "enableHarpDeployment": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable deployment of Azure Functions and Database"
      }
    },
    "enableAppConfigPrivateEndpoints": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable private endpoints for App Configuration"
      }
    },
    "rtsTimerSchedule": {
      "type": "string",
      "defaultValue": "0 0 7 * * *",
      "metadata": {
        "description": "RTS Timer Schedule for the function app"
      }
    }
  },
  "variables": {
    "harpSqlServerUAIName": "[format('id-sql-harp-dw-{0}', parameters('environment'))]",
    "harpSqlServerName": "[format('sql-harp-dw-{0}-uks', parameters('environment'))]",
    "appConfigStoreName": "[format('appconfig-harp-dw-{0}-uks', parameters('environment'))]",
    "appConfigUserAssignedIdentityName": "[format('id-appconfig-harp-dw-{0}', parameters('environment'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deployApplication",
      "resourceGroup": "[parameters('targetRgName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "virtualMachines_HRA_Data_ERStudioApp_name": {
            "value": "[parameters('virtualMachines_HRA_Data_ERStudioApp_name')]"
          },
          "virtualMachines_HRA_Data_ERStudioDB_name": {
            "value": "[parameters('virtualMachines_HRA_Data_ERStudioDB_name')]"
          },
          "virtualNetworks_HRADataWarehouseVirtualNetwork_name": {
            "value": "[parameters('virtualNetworks_HRADataWarehouseVirtualNetwork_name')]"
          },
          "bastionDnsName": {
            "value": "[parameters('bastionDnsName')]"
          },
          "bastionHosts_HRA_Data_DataModellingBS_name": {
            "value": "[parameters('bastionHosts_HRA_Data_DataModellingBS_name')]"
          },
          "networkInterfaces_hra_data_erstudioapp913_z1_name": {
            "value": "[parameters('networkInterfaces_hra_data_erstudioapp913_z1_name')]"
          },
          "networkInterfaces_hra_data_erstudiodb711_z1_name": {
            "value": "[parameters('networkInterfaces_hra_data_erstudiodb711_z1_name')]"
          },
          "networkSecurityGroups_HRA_Data_DataModelling_nsg_name": {
            "value": "[parameters('networkSecurityGroups_HRA_Data_DataModelling_nsg_name')]"
          },
          "publicIPAddresses_HRADataWarehouseVirtualNetwork_ip_name": {
            "value": "[parameters('publicIPAddresses_HRADataWarehouseVirtualNetwork_ip_name')]"
          },
          "publicIPAddresses_ERStudioApp_name": {
            "value": "[parameters('publicIPAddresses_ERStudioApp_name')]"
          },
          "publicIPAddresses_ERStudioDB_name": {
            "value": "[parameters('publicIPAddresses_ERStudioDB_name')]"
          },
          "sqlVirtualMachines_HRA_Data_ERStudioDB_name": {
            "value": "[parameters('sqlVirtualMachines_HRA_Data_ERStudioDB_name')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.1.11899",
              "templateHash": "9749477734059356458"
            }
          },
          "parameters": {
            "virtualMachines_HRA_Data_ERStudioDB_name": {
              "type": "string",
              "metadata": {
                "description": "Name of the ERStudioDB VM"
              }
            },
            "virtualMachines_HRA_Data_ERStudioApp_name": {
              "type": "string",
              "metadata": {
                "description": "Name of the ERStudioApp VM"
              }
            },
            "adminUsername": {
              "type": "string",
              "metadata": {
                "description": "Admin username for the VMs"
              }
            },
            "bastionHosts_HRA_Data_DataModellingBS_name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Bastion Host for VM access"
              }
            },
            "publicIPAddresses_ERStudioDB_name": {
              "type": "string",
              "metadata": {
                "description": "Public IP Address name for ERStudioDB VM"
              }
            },
            "publicIPAddresses_ERStudioApp_name": {
              "type": "string",
              "metadata": {
                "description": "Public IP Address name for ERStudioDB VM"
              }
            },
            "networkInterfaces_hra_data_erstudiodb711_z1_name": {
              "type": "string",
              "metadata": {
                "description": "Network interface name for ERStudioDB VM"
              }
            },
            "networkInterfaces_hra_data_erstudioapp913_z1_name": {
              "type": "string",
              "metadata": {
                "description": "Network interface name for ERStudioApp VM"
              }
            },
            "networkSecurityGroups_HRA_Data_DataModelling_nsg_name": {
              "type": "string",
              "metadata": {
                "description": "NSG for VMs"
              }
            },
            "sqlVirtualMachines_HRA_Data_ERStudioDB_name": {
              "type": "string",
              "metadata": {
                "description": "SQL VM name for ERStudioApp"
              }
            },
            "publicIPAddresses_HRADataWarehouseVirtualNetwork_ip_name": {
              "type": "string",
              "metadata": {
                "description": "Public IP address for the Bastion Host"
              }
            },
            "virtualNetworks_HRADataWarehouseVirtualNetwork_name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Data Warehouse Virtual Network"
              }
            },
            "bastionDnsName": {
              "type": "string",
              "metadata": {
                "description": "DNS hostname for Bastion Host"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2024-05-01",
              "name": "[parameters('publicIPAddresses_ERStudioApp_name')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "zones": [
                "1"
              ],
              "properties": {
                "ipAddress": "20.0.121.199",
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2024-05-01",
              "name": "[parameters('publicIPAddresses_ERStudioDB_name')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "zones": [
                "1"
              ],
              "properties": {
                "ipAddress": "20.77.4.116",
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4
              }
            },
            {
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2024-05-01",
              "name": "[parameters('publicIPAddresses_HRADataWarehouseVirtualNetwork_ip_name')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard",
                "tier": "Regional"
              },
              "properties": {
                "ipAddress": "172.167.143.176",
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4,
                "ipTags": []
              }
            },
            {
              "type": "Microsoft.Network/bastionHosts",
              "apiVersion": "2024-05-01",
              "name": "[parameters('bastionHosts_HRA_Data_DataModellingBS_name')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "enablePrivateOnlyBastion": false,
                "enableSessionRecording": false,
                "dnsName": "[parameters('bastionDnsName')]",
                "scaleUnits": 2,
                "enableTunneling": true,
                "ipConfigurations": [
                  {
                    "name": "IpConf",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_HRADataWarehouseVirtualNetwork_ip_name'))]"
                      },
                      "subnet": {
                        "id": "[resourceId('VisualStudioOnline-4140D62E99124BBBABC390FFA33D669D', 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworks_HRADataWarehouseVirtualNetwork_name'), 'AzureBastionSubnet')]"
                      }
                    },
                    "id": "[resourceId('Microsoft.Network/bastionHosts/bastionHostIpConfigurations', parameters('bastionHosts_HRA_Data_DataModellingBS_name'), 'IpConf')]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_HRADataWarehouseVirtualNetwork_ip_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2024-05-01",
              "name": "[parameters('networkInterfaces_hra_data_erstudioapp913_z1_name')]",
              "location": "[resourceGroup().location]",
              "kind": "Regular",
              "properties": {
                "defaultOutboundConnectivityEnabled": false,
                "allowPort25Out": false,
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAddress": "172.18.0.4",
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_ERStudioApp_name'))]",
                        "properties": {
                          "deleteOption": "Delete"
                        }
                      },
                      "subnet": {
                        "id": "[resourceId('VisualStudioOnline-4140D62E99124BBBABC390FFA33D669D', 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworks_HRADataWarehouseVirtualNetwork_name'), 'HRADataWarehouseVirtualNetworkSubnet')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "networkSecurityGroup": {
                  "id": "[reference(resourceId('Microsoft.Resources/deployments', 'nsg-data-modelling-deployment'), '2022-09-01').outputs.nsgId.value]"
                },
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'nsg-data-modelling-deployment')]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_ERStudioApp_name'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2024-05-01",
              "name": "[parameters('networkInterfaces_hra_data_erstudiodb711_z1_name')]",
              "location": "[resourceGroup().location]",
              "kind": "Regular",
              "properties": {
                "defaultOutboundConnectivityEnabled": false,
                "allowPort25Out": false,
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "type": "Microsoft.Network/networkInterfaces/ipConfigurations",
                    "properties": {
                      "privateIPAddress": "172.18.0.5",
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_ERStudioDB_name'))]",
                        "properties": {
                          "deleteOption": "Delete"
                        }
                      },
                      "subnet": {
                        "id": "[resourceId('VisualStudioOnline-4140D62E99124BBBABC390FFA33D669D', 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworks_HRADataWarehouseVirtualNetwork_name'), 'HRADataWarehouseVirtualNetworkSubnet')]"
                      },
                      "primary": true,
                      "privateIPAddressVersion": "IPv4"
                    }
                  }
                ],
                "dnsSettings": {
                  "dnsServers": []
                },
                "enableAcceleratedNetworking": true,
                "enableIPForwarding": false,
                "disableTcpStateTracking": false,
                "networkSecurityGroup": {
                  "id": "[reference(resourceId('Microsoft.Resources/deployments', 'nsg-data-modelling-deployment'), '2022-09-01').outputs.nsgId.value]"
                },
                "nicType": "Standard",
                "auxiliaryMode": "None",
                "auxiliarySku": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'nsg-data-modelling-deployment')]",
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_ERStudioDB_name'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2024-07-01",
              "name": "[parameters('virtualMachines_HRA_Data_ERStudioApp_name')]",
              "location": "[resourceGroup().location]",
              "zones": [
                "1"
              ],
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "Standard_D4as_v5"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "MicrosoftWindowsServer",
                    "offer": "WindowsServer",
                    "sku": "2019-datacenter-gensecond",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "StandardSSD_LRS"
                    },
                    "diskSizeGB": 512
                  }
                },
                "osProfile": {
                  "adminUsername": "[parameters('adminUsername')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": true
                  }
                },
                "securityProfile": {
                  "uefiSettings": {
                    "secureBootEnabled": true,
                    "vTpmEnabled": true
                  },
                  "securityType": "TrustedLaunch"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaces_hra_data_erstudioapp913_z1_name'))]",
                      "properties": {
                        "deleteOption": "Delete"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaces_hra_data_erstudioapp913_z1_name'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2024-07-01",
              "name": "[parameters('virtualMachines_HRA_Data_ERStudioDB_name')]",
              "location": "[resourceGroup().location]",
              "zones": [
                "1"
              ],
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "Standard_E2as_v5"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "microsoftsqlserver",
                    "offer": "sql2019-ws2019",
                    "sku": "standard-gen2",
                    "version": "latest"
                  },
                  "osDisk": {
                    "osType": "Windows",
                    "createOption": "FromImage",
                    "caching": "ReadWrite",
                    "managedDisk": {
                      "storageAccountType": "Standard_LRS"
                    },
                    "diskSizeGB": 256
                  }
                },
                "osProfile": {
                  "adminUsername": "[parameters('adminUsername')]",
                  "windowsConfiguration": {
                    "provisionVMAgent": true,
                    "enableAutomaticUpdates": true
                  }
                },
                "securityProfile": {
                  "uefiSettings": {
                    "secureBootEnabled": true,
                    "vTpmEnabled": true
                  },
                  "securityType": "TrustedLaunch"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaces_hra_data_erstudiodb711_z1_name'))]",
                      "properties": {
                        "deleteOption": "Delete"
                      }
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaces_hra_data_erstudiodb711_z1_name'))]"
              ]
            },
            {
              "type": "Microsoft.SqlVirtualMachine/sqlVirtualMachines",
              "apiVersion": "2023-10-01",
              "name": "[parameters('sqlVirtualMachines_HRA_Data_ERStudioDB_name')]",
              "location": "[resourceGroup().location]",
              "properties": {
                "virtualMachineResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachines_HRA_Data_ERStudioDB_name'))]",
                "sqlImageOffer": "SQL2019-WS2019",
                "sqlServerLicenseType": "AHUB",
                "sqlManagement": "Full",
                "leastPrivilegeMode": "Enabled",
                "sqlImageSku": "Standard",
                "enableAutomaticUpgrade": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachines_HRA_Data_ERStudioDB_name'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "nsg-data-modelling-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('networkSecurityGroups_HRA_Data_DataModelling_nsg_name')]"
                  },
                  "location": {
                    "value": "[resourceGroup().location]"
                  },
                  "tags": {
                    "value": {}
                  },
                  "securityRules": {
                    "value": [
                      {
                        "name": "AllowDboxVnetCidrBlock",
                        "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "8443",
                          "sourceAddressPrefix": "*",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 110,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "AllowAnyCustom8443Inbound",
                        "properties": {
                          "description": "Allows Inbound Connection From iBoss",
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "8443",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 120,
                          "direction": "Inbound",
                          "sourcePortRanges": [],
                          "destinationPortRanges": [],
                          "sourceAddressPrefixes": [
                            "136.228.232.21/32",
                            "136.228.234.3/32",
                            "136.228.244.77/32",
                            "185.251.11.210/32",
                            "185.251.11.92/32",
                            "136.228.234.5/32",
                            "136.228.234.30/32",
                            "136.228.234.48/32",
                            "136.228.234.67/32",
                            "136.228.224.113/32",
                            "136.228.244.17/32",
                            "136.228.244.21/32",
                            "136.228.224.106/32",
                            "136.228.244.128/32",
                            "136.228.244.78/32",
                            "136.228.244.161/32",
                            "136.228.244.45/32",
                            "136.228.234.7/32",
                            "136.228.244.115/32"
                          ]
                        }
                      },
                      {
                        "name": "AllowCidrBlockCustomAnyInbound",
                        "properties": {
                          "description": "This is the ERStudioApp IP address and it's needed for login via SSO to work",
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "*",
                          "sourceAddressPrefix": "20.0.121.199",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 130,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "AllowPAIps",
                        "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "8443",
                          "destinationAddressPrefix": "*",
                          "access": "Allow",
                          "priority": 140,
                          "direction": "Inbound",
                          "sourceAddressPrefixes": [
                            "217.38.8.142",
                            "194.75.196.200",
                            "80.169.67.56",
                            "194.196.148.229"
                          ]
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "8420354978555442559"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "metadata": {
                        "description": "Name of the Network Security Group. Alphanumerics, underscores, periods, and hyphens. Start with alphanumeric. End alphanumeric or underscore. "
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Region where the resource will be deployed in"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "key-value pairs as tags, to identify the resource"
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "allLogs"
                      ],
                      "allowedValues": [
                        "allLogs",
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogsSpecified",
                        "count": "[length(filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs')))))]",
                        "input": {
                          "category": "[filter(parameters('diagnosticLogCategoriesToEnable'), lambda('item', not(equals(lambdaVariables('item'), 'allLogs'))))[copyIndex('diagnosticsLogsSpecified')]]",
                          "enabled": true
                        }
                      }
                    ],
                    "diagnosticsLogs": "[if(contains(parameters('diagnosticLogCategoriesToEnable'), 'allLogs'), createArray(createObject('categoryGroup', 'allLogs', 'enabled', true())), variables('diagnosticsLogsSpecified'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "flushConnection": "[parameters('flushConnection')]",
                        "securityRules": "[parameters('securityRules')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[if(not(empty(parameters('diagnosticSettingsName'))), parameters('diagnosticSettingsName'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "nsgId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource id of the newly created Network Security Group"
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "nsgName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the newly created Network Security Group"
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "vnetID": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworks_HRADataWarehouseVirtualNetwork_name'))]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('enableHarpDeployment')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deployHarpSyncDatabase",
      "resourceGroup": "[parameters('harpSyncResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sqlServerName": {
            "value": "[variables('harpSqlServerName')]"
          },
          "adminLogin": {
            "value": "[parameters('harpSqlAdminLogin')]"
          },
          "adminPassword": {
            "value": "[parameters('harpSqlAdminPassword')]"
          },
          "databases": {
            "value": [
              "harpprojectdata"
            ]
          },
          "spokeVNetId": {
            "value": "/subscriptions/461016b5-8363-472e-81be-eef6aad08353/resourceGroups/VisualStudioOnline-4140D62E99124BBBABC390FFA33D669D/providers/Microsoft.Network/virtualNetworks/HRADataWarehouseVirtualNetwork"
          },
          "spokePrivateEndpointSubnetName": {
            "value": "snet-privateendpoints"
          },
          "sqlServerUAIName": {
            "value": "[variables('harpSqlServerUAIName')]"
          },
          "networkingResourcesNames": {
            "value": {
              "azuresqlserverpep": "[format('pep-{0}', variables('harpSqlServerName'))]"
            }
          },
          "networkingResourceGroup": {
            "value": "[parameters('harpSyncResourceGroupName')]"
          },
          "auditRetentionDays": {
            "value": 30
          },
          "enableSqlServerAuditing": {
            "value": true
          },
          "logAnalyticsWorkspaceId": {
            "value": "[parameters('logAnalyticsWorkspaceId')]"
          },
          "tags": {
            "value": {
              "Environment": "[parameters('environment')]",
              "Purpose": "HARP Data Sync"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.1.11899",
              "templateHash": "2602260060886426993"
            }
          },
          "parameters": {
            "sqlServerName": {
              "type": "string",
              "defaultValue": "sql-rsp-dev-uks"
            },
            "adminLogin": {
              "type": "string",
              "defaultValue": ""
            },
            "adminPassword": {
              "type": "securestring"
            },
            "enableSqlAdminLogin": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable or disable SQL Server auditing (default: true)"
              }
            },
            "databases": {
              "type": "array",
              "defaultValue": []
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created."
              }
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the VNet to which the private endpoint will be connected."
              }
            },
            "spokePrivateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "sqlServerUAIName": {
              "type": "string",
              "defaultValue": ""
            },
            "networkingResourcesNames": {
              "type": "object"
            },
            "networkingResourceGroup": {
              "type": "string"
            },
            "auditRetentionDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "How long to keep audit logs (default: 30 days)"
              }
            },
            "enableSqlServerAuditing": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable or disable SQL Server auditing (default: true)"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource id of an existing Azure Log Analytics Workspace."
              }
            },
            "sqlDatabaseSkuConfig": {
              "type": "object",
              "defaultValue": {
                "name": "GP_S_Gen5",
                "tier": "GeneralPurpose",
                "family": "Gen5",
                "capacity": 12,
                "minCapacity": 6,
                "storageSize": "6GB",
                "zoneRedundant": false
              },
              "metadata": {
                "description": "SQL Database SKU configuration"
              }
            }
          },
          "variables": {
            "privateDnsZoneNames": "[format('privatelink{0}', environment().suffixes.sqlServerHostname)]",
            "sqlServerResourceName": "sqlServer",
            "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
            "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
            "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
            "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
            "sqlServerContributorRoleGuid": "9b7fa17d-e63e-47b0-bb0a-15c516ac86ec",
            "spokeVNetLinks": [
              {
                "vnetName": "[variables('spokeVNetName')]",
                "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName'))]",
                "registrationEnabled": false
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('sqlServerUAIName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Sql/servers",
              "apiVersion": "2024-05-01-preview",
              "name": "[parameters('sqlServerName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sqlServerUAIName')))]": {}
                }
              },
              "properties": {
                "administratorLogin": "[if(parameters('enableSqlAdminLogin'), parameters('adminLogin'), null())]",
                "administratorLoginPassword": "[if(parameters('enableSqlAdminLogin'), parameters('adminPassword'), null())]",
                "publicNetworkAccess": "Disabled",
                "primaryUserAssignedIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sqlServerUAIName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sqlServerUAIName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/administrators",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'activeDirectory')]",
              "properties": {
                "login": "nikhil.bharathesh_PA@hra.nhs.uk",
                "tenantId": "8e1f0aca-d87d-4f20-939e-36243d574267",
                "sid": "9a3eae88-0bf5-41d8-8791-92ddfe098a0b",
                "administratorType": "ActiveDirectory"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2021-11-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'master')]",
              "location": "[parameters('location')]",
              "properties": {},
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "copy": {
                "name": "sqldatabases",
                "count": "[length(range(0, length(parameters('databases'))))]"
              },
              "type": "Microsoft.Sql/servers/databases",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('databases')[range(0, length(parameters('databases')))[copyIndex()]])]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('sqlDatabaseSkuConfig').name]",
                "tier": "[parameters('sqlDatabaseSkuConfig').tier]",
                "family": "[parameters('sqlDatabaseSkuConfig').family]",
                "capacity": "[parameters('sqlDatabaseSkuConfig').capacity]",
                "size": "[parameters('sqlDatabaseSkuConfig').storageSize]"
              },
              "properties": {
                "createMode": "Default",
                "minCapacity": "[parameters('sqlDatabaseSkuConfig').minCapacity]",
                "zoneRedundant": "[parameters('sqlDatabaseSkuConfig').zoneRedundant]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/advancedThreatProtectionSettings",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'default')]",
              "properties": {
                "state": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/securityAlertPolicies",
              "apiVersion": "2022-11-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'Default')]",
              "properties": {
                "state": "Enabled",
                "retentionDays": 90,
                "emailAccountAdmins": true,
                "emailAddresses": [
                  "nikhil.bharathesh_pa@hra.nhs.uk"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/advancedThreatProtectionSettings', parameters('sqlServerName'), 'default')]",
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Sql/servers/sqlVulnerabilityAssessments",
              "apiVersion": "2022-11-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'default')]",
              "properties": {
                "state": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', parameters('sqlServerName'), 'Default')]",
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "condition": "[parameters('enableSqlServerAuditing')]",
              "type": "Microsoft.Sql/servers/auditingSettings",
              "apiVersion": "2024-05-01-preview",
              "name": "[format('{0}/{1}', parameters('sqlServerName'), 'default')]",
              "properties": {
                "state": "Enabled",
                "isAzureMonitorTargetEnabled": true,
                "retentionDays": "[parameters('auditRetentionDays')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('sqlServerName'), 'master')]",
              "name": "SQLSecurityAuditLogs",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "SQLSecurityAuditEvents",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), 'master')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('sqlServerContributorRoleAssignmentDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "ra-sqlServerContributorRoleAssignment"
                  },
                  "principalId": {
                    "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sqlServerUAIName')), '2023-01-31').principalId]"
                  },
                  "resourceId": {
                    "value": "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                  },
                  "roleDefinitionId": {
                    "value": "[variables('sqlServerContributorRoleGuid')]"
                  },
                  "principalType": {
                    "value": "ServicePrincipal"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "15118703545877086311"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 64,
                      "metadata": {
                        "description": "The name of the RoleAssignment. Can be found by running: az role assignment list --output json"
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The type of resource you wish to assign the role to. Can be found by running: az resource list --output json"
                      }
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the RoleDefinition you wish to assign. Can be found by running: az role definition list --output json"
                      }
                    },
                    "principalId": {
                      "type": "string"
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "ServicePrincipal",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Device",
                        "ForeignGroup",
                        "Group",
                        "User"
                      ],
                      "metadata": {
                        "description": "Optional, default ServicePrincipal"
                      }
                    },
                    "roledescription": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"parameters\": {\n        \"scope\": {\n            \"type\": \"string\"\n        },\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"roleDefinitionId\": {\n            \"type\": \"string\"\n        },\n        \"principalId\": {\n            \"type\": \"string\"\n        },\n        \"principalType\": {\n            \"type\": \"string\"\n        }\n    },\n    \"resources\": [\n        {\n            \"type\": \"Microsoft.Authorization/roleAssignments\",\n            \"apiVersion\": \"2020-08-01-preview\",\n            \"scope\": \"[parameters('scope')]\",\n            \"name\": \"[parameters('name')]\",\n            \"properties\": {\n                \"roleDefinitionId\": \"[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]\",\n                \"principalId\": \"[parameters('principalId')]\",\n                \"principalType\": \"[parameters('principalType')]\"\n            }\n        }\n    ],\n    \"outputs\": {\n        \"roleAssignmentId\": {\n            \"type\": \"string\",\n            \"value\": \"[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]\"\n        }\n    }\n}"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "mode": "Incremental",
                        "expressionEvaluationOptions": {
                          "scope": "Outer"
                        },
                        "template": "[json(variables('$fxv#0'))]",
                        "parameters": {
                          "scope": {
                            "value": "[parameters('resourceId')]"
                          },
                          "name": {
                            "value": "[guid(parameters('principalId'), parameters('roleDefinitionId'), parameters('resourceId'))]"
                          },
                          "roleDefinitionId": {
                            "value": "[parameters('roleDefinitionId')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "principalType": {
                            "value": "[parameters('principalType')]"
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceid": {
                      "type": "string",
                      "value": "[parameters('resourceId')]"
                    },
                    "roleAssignmentId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2021-04-01').outputs.roleAssignmentId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sqlServerUAIName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('sqlServerNetwork-{0}', uniqueString(resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))))]",
              "resourceGroup": "[parameters('networkingResourceGroup')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "azServicePrivateDnsZoneName": {
                    "value": "[variables('privateDnsZoneNames')]"
                  },
                  "azServiceId": {
                    "value": "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('networkingResourcesNames').azuresqlserverpep]"
                  },
                  "privateEndpointSubResourceName": {
                    "value": "[variables('sqlServerResourceName')]"
                  },
                  "virtualNetworkLinks": {
                    "value": "[variables('spokeVNetLinks')]"
                  },
                  "subnetId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "15593413843453556825"
                    }
                  },
                  "parameters": {
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "subnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource Id of the subnet, where the private endpoint and NIC will be attached to"
                      }
                    },
                    "azServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The Resource Id of Private Link Service. The Resource Id of the Az Resource that we need to attach the Private Endpoint to"
                      }
                    },
                    "azServicePrivateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource name of the Private Endpoint"
                      }
                    },
                    "privateEndpointSubResourceName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The region (location) in which the resource will be deployed. Default: resource group location."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('azServicePrivateDnsZoneName')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[parameters('virtualNetworkLinks')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.1.11899",
                              "templateHash": "11764475892009351978"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                              }
                            },
                            "aRecords": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of A records to be added to the DNS Zone"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2024-06-01",
                              "name": "[parameters('name')]",
                              "location": "global",
                              "tags": "[parameters('tags')]"
                            },
                            {
                              "copy": {
                                "name": "privateDnsZoneLink",
                                "count": "[length(parameters('virtualNetworkLinks'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2024-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                              "location": "global",
                              "properties": {
                                "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "dnsARecord",
                                "count": "[length(parameters('aRecords'))]"
                              },
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2024-06-01",
                              "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                              "properties": {
                                "ttl": 60,
                                "aRecords": [
                                  {
                                    "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "privateDnsZonesId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('privateEndpointDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('privateEndpointName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "privateDnsZonesId": {
                            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName')))), '2022-09-01').outputs.privateDnsZonesId.value]"
                          },
                          "privateLinkServiceId": {
                            "value": "[parameters('azServiceId')]"
                          },
                          "snetId": {
                            "value": "[parameters('subnetId')]"
                          },
                          "subresource": {
                            "value": "[parameters('privateEndpointSubResourceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.1.11899",
                              "templateHash": "2962096315837766157"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 2,
                              "maxLength": 64,
                              "metadata": {
                                "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "snetId": {
                              "type": "string",
                              "metadata": {
                                "description": "The subnet resource ID where the nic of the PE will be attached to"
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                              }
                            },
                            "subresource": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                              }
                            },
                            "privateDnsZonesId": {
                              "type": "string",
                              "metadata": {
                                "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                              }
                            },
                            "customNICName": {
                              "type": "string",
                              "defaultValue": ""
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "subnet": {
                                  "id": "[parameters('snetId')]"
                                },
                                "customNetworkInterfaceName": "[parameters('customNICName')]",
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[format('pl-{0}', parameters('name'))]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                                      "groupIds": [
                                        "[parameters('subresource')]"
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                              "properties": {
                                "privateDnsZoneConfigs": [
                                  {
                                    "name": "config1",
                                    "properties": {
                                      "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('privateDnsZoneDeployment-{0}', uniqueString(parameters('azServiceId'), parameters('privateEndpointSubResourceName'))))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
              ]
            }
          ],
          "outputs": {
            "sqlServer_name": {
              "type": "string",
              "value": "[parameters('sqlServerName')]"
            },
            "outputsqlServerUAIID": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sqlServerUAIName'))]"
            },
            "outputsqlServerUAIName": {
              "type": "string",
              "value": "[parameters('sqlServerUAIName')]"
            },
            "outputsqlServerUAIClientID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('sqlServerUAIName')), '2023-01-31').clientId]"
            },
            "database_names": {
              "type": "array",
              "copy": {
                "count": "[length(range(0, length(parameters('databases'))))]",
                "input": {
                  "id": "[parameters('databases')[range(0, length(parameters('databases')))[range(0, length(parameters('databases')))[copyIndex()]]]]"
                }
              }
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('enableHarpDeployment')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deployHarpAppConfiguration",
      "resourceGroup": "[parameters('harpSyncResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "configStoreName": {
            "value": "[variables('appConfigStoreName')]"
          },
          "appConfigurationUserAssignedIdentityName": {
            "value": "[variables('appConfigUserAssignedIdentityName')]"
          },
          "sqlServerName": {
            "value": "[variables('harpSqlServerName')]"
          },
          "spokeVNetId": {
            "value": "/subscriptions/461016b5-8363-472e-81be-eef6aad08353/resourceGroups/VisualStudioOnline-4140D62E99124BBBABC390FFA33D669D/providers/Microsoft.Network/virtualNetworks/HRADataWarehouseVirtualNetwork"
          },
          "spokePrivateEndpointSubnetName": {
            "value": "snet-privateendpoints"
          },
          "enablePrivateEndpoints": {
            "value": "[parameters('enableAppConfigPrivateEndpoints')]"
          },
          "rtsTimerSchedule": {
            "value": "[parameters('rtsTimerSchedule')]"
          },
          "harpDatabaseName": {
            "value": "harpprojectdata"
          },
          "tags": {
            "value": {
              "Environment": "[parameters('environment')]",
              "Purpose": "HARP Data Sync"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.1.11899",
              "templateHash": "6028040487767763170"
            }
          },
          "parameters": {
            "configStoreName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the App Configuration store."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Specifies the Azure location where the app configuration store should be created."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Adds tags for the key-value resources. It's optional"
              }
            },
            "appConfigurationUserAssignedIdentityName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Name of the user-assigned managed identity for App Configuration access"
              }
            },
            "sqlServerName": {
              "type": "string",
              "metadata": {
                "description": "SQL Server name for connection strings"
              }
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the VNet to which the private endpoint will be connected."
              }
            },
            "spokePrivateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
              }
            },
            "enablePrivateEndpoints": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable private endpoints for App Configuration"
              }
            },
            "rtsTimerSchedule": {
              "type": "string",
              "defaultValue": "0 */5 * * * *",
              "metadata": {
                "description": "RTS Timer Schedule for the function app"
              }
            },
            "harpDatabaseName": {
              "type": "string",
              "defaultValue": "harpprojectdata",
              "metadata": {
                "description": "HARP Database name"
              }
            }
          },
          "variables": {
            "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
            "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
            "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
            "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
            "keyValues": [
              {
                "name": "RtsTimerSchedule",
                "value": "[parameters('rtsTimerSchedule')]",
                "contentType": null
              },
              {
                "name": "ConnectionStrings:HarpDatabaseConnection",
                "value": "[format('Server=tcp:{0}{1},1433;Database={2};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=''Active Directory Default'';', parameters('sqlServerName'), environment().suffixes.sqlServerHostname, parameters('harpDatabaseName'))]",
                "contentType": null
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('appConfigurationUserAssignedIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "metadata": {
                "description": "User-assigned managed identity for App Configuration access"
              }
            },
            {
              "type": "Microsoft.AppConfiguration/configurationStores",
              "apiVersion": "2024-05-01",
              "name": "[parameters('configStoreName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "disableLocalAuth": true,
                "enablePurgeProtection": false,
                "publicNetworkAccess": "[if(parameters('enablePrivateEndpoints'), 'Disabled', 'Enabled')]",
                "dataPlaneProxy": {
                  "authenticationMode": "Pass-through",
                  "privateLinkDelegation": "Enabled"
                }
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('appConfigurationUserAssignedIdentityName')))]": {}
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('appConfigurationUserAssignedIdentityName'))]"
              ],
              "metadata": {
                "description": "App Configuration store for HARP functions"
              }
            },
            {
              "copy": {
                "name": "configStoreKeyValue",
                "count": "[length(variables('keyValues'))]"
              },
              "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('configStoreName'), variables('keyValues')[copyIndex()].name)]",
              "properties": {
                "value": "[variables('keyValues')[copyIndex()].value]",
                "contentType": "[variables('keyValues')[copyIndex()].contentType]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('configStoreName'))]"
              ],
              "metadata": {
                "description": "Key-value pairs in the App Configuration store"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', parameters('configStoreName'))]",
              "name": "[guid(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('configStoreName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('appConfigurationUserAssignedIdentityName')), 'App Configuration Data Reader')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('appConfigurationUserAssignedIdentityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('appConfigurationUserAssignedIdentityName'))]",
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('configStoreName'))]"
              ],
              "metadata": {
                "description": "Role assignment for the managed identity to access App Configuration"
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appConfigPrivateDnsZone",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "privatelink.azconfig.io"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[variables('spokeVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName'))]",
                        "registrationEnabled": false
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "11764475892009351978"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of A records to be added to the DNS Zone"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dnsARecord",
                        "count": "[length(parameters('aRecords'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                      "properties": {
                        "ttl": 60,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZonesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "Private DNS zone for App Configuration"
              }
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appConfigPrivateEndpoint",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[format('pep-{0}', parameters('configStoreName'))]"
                  },
                  "snetId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                  },
                  "privateLinkServiceId": {
                    "value": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('configStoreName'))]"
                  },
                  "subresource": {
                    "value": "configurationStores"
                  },
                  "privateDnsZonesId": "[if(parameters('enablePrivateEndpoints'), createObject('value', reference(resourceId('Microsoft.Resources/deployments', 'appConfigPrivateDnsZone'), '2022-09-01').outputs.privateDnsZonesId.value), createObject('value', ''))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "2962096315837766157"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "snetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                      }
                    },
                    "subresource": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                      }
                    },
                    "privateDnsZonesId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                      }
                    },
                    "customNICName": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('snetId')]"
                        },
                        "customNetworkInterfaceName": "[parameters('customNICName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('pl-{0}', parameters('name'))]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subresource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "config1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'appConfigPrivateDnsZone')]",
                "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('configStoreName'))]"
              ],
              "metadata": {
                "description": "Private endpoint for App Configuration"
              }
            }
          ],
          "outputs": {
            "appConfigurationUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user assigned managed identity for the App Configuration to be able to read configurations from it."
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('appConfigurationUserAssignedIdentityName'))]"
            },
            "appConfigurationUserAssignedIdentityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the user assigned managed identity for the App Configuration."
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('appConfigurationUserAssignedIdentityName')), '2023-01-31').principalId]"
            },
            "appConfigURL": {
              "type": "string",
              "metadata": {
                "description": "The endpoint URL of the App Configuration store"
              },
              "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('configStoreName')), '2024-05-01').endpoint]"
            },
            "appConfigMIClientID": {
              "type": "string",
              "metadata": {
                "description": "The client ID of the managed identity for App Configuration access"
              },
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('appConfigurationUserAssignedIdentityName')), '2023-01-31').clientId]"
            },
            "configStoreId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the App Configuration store"
              },
              "value": "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('configStoreName'))]"
            },
            "configStoreName": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Configuration store"
              },
              "value": "[parameters('configStoreName')]"
            }
          }
        }
      }
    },
    {
      "condition": "[parameters('enableHarpDeployment')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "deployHarpSyncFunctions",
      "resourceGroup": "[parameters('harpSyncResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sku": {
            "value": "B1"
          },
          "spokeVNetId": {
            "value": "/subscriptions/461016b5-8363-472e-81be-eef6aad08353/resourceGroups/VisualStudioOnline-4140D62E99124BBBABC390FFA33D669D/providers/Microsoft.Network/virtualNetworks/HRADataWarehouseVirtualNetwork"
          },
          "spokePrivateEndpointSubnetName": {
            "value": "snet-privateendpoints"
          },
          "functionAppSubnetName": {
            "value": "snet-functionapps"
          },
          "sqlDBManagedIdentityClientId": "[if(parameters('enableHarpDeployment'), createObject('value', coalesce(tryGet(tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('harpSyncResourceGroupName')), 'Microsoft.Resources/deployments', 'deployHarpSyncDatabase'), '2022-09-01'), 'outputs'), 'outputsqlServerUAIClientID'), 'value'), '')), createObject('value', ''))]",
          "logAnalyticsWorkspaceId": {
            "value": "[parameters('logAnalyticsWorkspaceId')]"
          },
          "userAssignedIdentities": "[if(parameters('enableHarpDeployment'), createObject('value', union(if(not(empty(coalesce(tryGet(tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('harpSyncResourceGroupName')), 'Microsoft.Resources/deployments', 'deployHarpSyncDatabase'), '2022-09-01'), 'outputs'), 'outputsqlServerUAIID'), 'value'), ''))), createArray(tryGet(tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('harpSyncResourceGroupName')), 'Microsoft.Resources/deployments', 'deployHarpSyncDatabase'), '2022-09-01'), 'outputs'), 'outputsqlServerUAIID'), 'value')), createArray()), if(not(empty(coalesce(tryGet(tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('harpSyncResourceGroupName')), 'Microsoft.Resources/deployments', 'deployHarpAppConfiguration'), '2022-09-01'), 'outputs'), 'appConfigurationUserAssignedIdentityId'), 'value'), ''))), createArray(tryGet(tryGet(tryGet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('harpSyncResourceGroupName')), 'Microsoft.Resources/deployments', 'deployHarpAppConfiguration'), '2022-09-01'), 'outputs'), 'appConfigurationUserAssignedIdentityId'), 'value')), createArray()))), createObject('value', createArray()))]",
          "environment": {
            "value": "[parameters('environment')]"
          },
          "tags": {
            "value": {
              "Environment": "[parameters('environment')]",
              "Purpose": "HARP Data Sync"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.1.11899",
              "templateHash": "9726793476534963800"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where this resource will be created"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to created resources"
              }
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Vnet to which the private endpoint will be connected"
              }
            },
            "spokePrivateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the subnet in the VNET to which the private endpoint will be connected"
              }
            },
            "functionAppSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the subnet for VNet integration"
              }
            },
            "sqlDBManagedIdentityClientId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Client ID of the managed Identity to be used for the SQL DB connection string"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource id of an existing Azure Log Analytics Workspace"
              }
            },
            "userAssignedIdentities": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Array of user assigned identity resource IDs"
              }
            },
            "environment": {
              "type": "string",
              "defaultValue": "dev",
              "metadata": {
                "description": "Environment name (dev, prod)"
              }
            },
            "sku": {
              "type": "string",
              "allowedValues": [
                "B1",
                "S1",
                "S2",
                "S3",
                "P1V3",
                "P2V3",
                "P3V3",
                "P1V3_AZ",
                "P2V3_AZ",
                "P3V3_AZ",
                "EP1",
                "EP2",
                "EP3",
                "ASE_I1V2_AZ",
                "ASE_I2V2_AZ",
                "ASE_I3V2_AZ",
                "ASE_I1V2",
                "ASE_I2V2",
                "ASE_I3V2"
              ],
              "metadata": {
                "description": "Defines the name, tier, size, family and capacity of the App Service Plan. Plans ending to _AZ, are deploying at least three instances in three Availability Zones. EP* is only for functions"
              }
            }
          },
          "variables": {
            "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
            "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
            "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
            "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
            "functionApps": [
              {
                "name": "func-harp-data-sync",
                "storageAccountName": "[format('stharpdatasync{0}', parameters('environment'))]",
                "appServicePlanName": "asp-harp-data-sync-uks"
              },
              {
                "name": "func-validate-irasid",
                "storageAccountName": "[format('stvalidateirasid{0}', parameters('environment'))]",
                "appServicePlanName": "asp-validate-irasid-uks"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "appInsights-harp-functions",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('appi-harp-functions-{0}', parameters('environment'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "workspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "3638322744289150527"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Application Insights."
                      }
                    },
                    "appInsightsType": {
                      "type": "string",
                      "defaultValue": "web",
                      "allowedValues": [
                        "web",
                        "other"
                      ],
                      "metadata": {
                        "description": "Optional. Application type."
                      }
                    },
                    "workspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the log analytics workspace which the data will be ingested to. If left empty, applicationInsights will create one for us. This property is required to create an application with this API version. Applications from older versions will not have this property."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": 90,
                      "allowedValues": [
                        30,
                        60,
                        90,
                        120,
                        180,
                        270,
                        365,
                        550,
                        730
                      ],
                      "metadata": {
                        "description": "Optional. Retention period in days."
                      }
                    },
                    "samplingPercentage": {
                      "type": "int",
                      "defaultValue": 100,
                      "minValue": 0,
                      "maxValue": 100,
                      "metadata": {
                        "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "Application_Type": "[parameters('appInsightsType')]",
                        "Request_Source": "rest",
                        "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "RetentionInDays": "[parameters('retentionInDays')]",
                        "SamplingPercentage": "[parameters('samplingPercentage')]"
                      }
                    }
                  ],
                  "outputs": {
                    "appInsNname": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application insights component."
                      },
                      "value": "[parameters('name')]"
                    },
                    "appInsResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application insights component."
                      },
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "appInsInstrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "The applicationInsights Instrumentation Key."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').InstrumentationKey]"
                    },
                    "appInsConnectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "The applicationInsights Connection String."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
                    },
                    "applicationId": {
                      "type": "string",
                      "metadata": {
                        "description": "The application ID of the application insights component."
                      },
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').AppId]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "appServicePlans",
                "count": "[length(variables('functionApps'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('appServicePlan-{0}', variables('functionApps')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('functionApps')[copyIndex()].appServicePlanName]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  },
                  "serverOS": {
                    "value": "Windows"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "4322906769442650122"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 40,
                      "metadata": {
                        "description": "Required. The name of the app service plan to deploy."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "allowedValues": [
                        "B1",
                        "B3",
                        "S1",
                        "S2",
                        "S3",
                        "P1V3",
                        "P2V3",
                        "P3V3",
                        "P1V3_AZ",
                        "P2V3_AZ",
                        "P3V3_AZ",
                        "EP1",
                        "EP2",
                        "EP3",
                        "ASE_I1V2_AZ",
                        "ASE_I2V2_AZ",
                        "ASE_I3V2_AZ",
                        "ASE_I1V2",
                        "ASE_I2V2",
                        "ASE_I3V2"
                      ],
                      "metadata": {
                        "description": "Optional S1 is default. Defines the name, tier, size, family and capacity of the App Service Plan. Plans ending to _AZ, are deploying at least three instances in three Availability Zones. EP* is only for functions"
                      }
                    },
                    "serverOS": {
                      "type": "string",
                      "defaultValue": "Windows",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Optional, default is Windows. Kind of server OS."
                      }
                    },
                    "hostingEnvironmentProfileId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The Resource ID of the hosting environment to use for the App Service Plan. Used only if deployAseV3=true or SKU is ASE_I1V2_AZ."
                      }
                    },
                    "perSiteScaling": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
                      }
                    },
                    "maximumElasticWorkerCount": {
                      "type": "int",
                      "defaultValue": 20,
                      "metadata": {
                        "description": "Optional, dafualt is 20. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
                      }
                    },
                    "targetWorkerCount": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Scaling worker count."
                      }
                    },
                    "targetWorkerSize": {
                      "type": "int",
                      "defaultValue": 0,
                      "allowedValues": [
                        0,
                        1,
                        2
                      ],
                      "metadata": {
                        "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true
                        }
                      }
                    ],
                    "zoneRedundant": "[if(endsWith(parameters('sku'), 'AZ'), true(), false())]",
                    "isElasticPremium": "[if(startsWith(parameters('sku'), 'EP'), true(), false())]",
                    "aspKind": "[if(variables('isElasticPremium'), 'elastic', if(equals(parameters('serverOS'), 'Windows'), '', 'linux'))]",
                    "skuConfigurationMap": {
                      "EP1": {
                        "name": "EP1",
                        "tier": "ElasticPremium",
                        "size": "EP1",
                        "family": "EP",
                        "capacity": 1
                      },
                      "EP2": {
                        "name": "EP2",
                        "tier": "ElasticPremium",
                        "size": "EP2",
                        "family": "EP",
                        "capacity": 1
                      },
                      "EP3": {
                        "name": "EP3",
                        "tier": "ElasticPremium",
                        "size": "EP3",
                        "family": "EP",
                        "capacity": 1
                      },
                      "B1": {
                        "name": "B1",
                        "tier": "Basic",
                        "size": "B1",
                        "family": "B",
                        "capacity": 1
                      },
                      "B2": {
                        "name": "B2",
                        "tier": "Basic",
                        "size": "B2",
                        "family": "B",
                        "capacity": 1
                      },
                      "B3": {
                        "name": "B3",
                        "tier": "Basic",
                        "size": "B3",
                        "family": "B",
                        "capacity": 1
                      },
                      "S1": {
                        "name": "S1",
                        "tier": "Standard",
                        "size": "S1",
                        "family": "S",
                        "capacity": 1
                      },
                      "S2": {
                        "name": "S2",
                        "tier": "Standard",
                        "size": "S2",
                        "family": "S",
                        "capacity": 1
                      },
                      "S3": {
                        "name": "S3",
                        "tier": "Standard",
                        "size": "S3",
                        "family": "S",
                        "capacity": 1
                      },
                      "P1V3": {
                        "name": "P1V3",
                        "tier": "PremiumV2",
                        "size": "P1V3",
                        "family": "Pv3",
                        "capacity": 1
                      },
                      "P1V3_AZ": {
                        "name": "P1V3",
                        "tier": "PremiumV2",
                        "size": "P1V3",
                        "family": "Pv3",
                        "capacity": 3
                      },
                      "P2V3": {
                        "name": "P2V3",
                        "tier": "PremiumV2",
                        "size": "P2V3",
                        "family": "Pv3",
                        "capacity": 1
                      },
                      "P2V3_AZ": {
                        "name": "P2V3",
                        "tier": "PremiumV2",
                        "size": "P2V3",
                        "family": "Pv3",
                        "capacity": 3
                      },
                      "P3V3": {
                        "name": "P3V3",
                        "tier": "PremiumV2",
                        "size": "P3V3",
                        "family": "Pv3",
                        "capacity": 1
                      },
                      "P3V3_AZ": {
                        "name": "P3V3",
                        "tier": "PremiumV2",
                        "size": "P3V3",
                        "family": "Pv3",
                        "capacity": 3
                      },
                      "ASE_I1V2_AZ": {
                        "name": "I1v2",
                        "tier": "IsolatedV2",
                        "size": "I1v2",
                        "family": "Iv2",
                        "capacity": 3
                      },
                      "ASE_I2V2_AZ": {
                        "name": "I2v2",
                        "tier": "IsolatedV2",
                        "size": "I2v2",
                        "family": "Iv2",
                        "capacity": 3
                      },
                      "ASE_I3V2_AZ": {
                        "name": "I3v2",
                        "tier": "IsolatedV2",
                        "size": "I3v2",
                        "family": "Iv2",
                        "capacity": 3
                      },
                      "ASE_I1V2": {
                        "name": "I1v2",
                        "tier": "IsolatedV2",
                        "size": "I1v2",
                        "family": "Iv2",
                        "capacity": 1
                      },
                      "ASE_I2V2": {
                        "name": "I2v2",
                        "tier": "IsolatedV2",
                        "size": "I2v2",
                        "family": "Iv2",
                        "capacity": 1
                      },
                      "ASE_I3V2": {
                        "name": "I3v2",
                        "tier": "IsolatedV2",
                        "size": "I3v2",
                        "family": "Iv2",
                        "capacity": 1
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/serverfarms",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('name')]",
                      "kind": "[variables('aspKind')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": "[variables('skuConfigurationMap')[parameters('sku')]]",
                      "properties": {
                        "perSiteScaling": "[parameters('perSiteScaling')]",
                        "maximumElasticWorkerCount": "[if(and(less(parameters('maximumElasticWorkerCount'), 3), variables('zoneRedundant')), 3, parameters('maximumElasticWorkerCount'))]",
                        "reserved": "[equals(parameters('serverOS'), 'Linux')]",
                        "targetWorkerCount": "[if(and(less(parameters('targetWorkerCount'), 3), variables('zoneRedundant')), 3, parameters('targetWorkerCount'))]",
                        "targetWorkerSizeId": "[parameters('targetWorkerSize')]",
                        "zoneRedundant": "[variables('zoneRedundant')]",
                        "hostingEnvironmentProfile": "[if(startsWith(parameters('sku'), 'ASE'), createObject('id', parameters('hostingEnvironmentProfileId')), null())]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('diagnosticWorkspaceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": null,
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": null,
                        "eventHubName": null,
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": []
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the app service plan was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the app service plan."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the app service plan."
                      },
                      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference(resourceId('Microsoft.Web/serverfarms', parameters('name')), '2022-03-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "storageAccounts",
                "count": "[length(variables('functionApps'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storage-{0}', variables('functionApps')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('functionApps')[copyIndex()].storageAccountName]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sku": {
                    "value": "Standard_LRS"
                  },
                  "kind": {
                    "value": "StorageV2"
                  },
                  "supportsHttpsTrafficOnly": {
                    "value": true
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "networkAcls": {
                    "value": {
                      "defaultAction": "Deny",
                      "bypass": "AzureServices",
                      "virtualNetworkRules": [
                        {
                          "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('functionAppSubnetName'))]",
                          "action": "Allow"
                        }
                      ]
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "17498072711434239995"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "name must be max 24 chars, globally unique, all lowercase letters or numbers with no spaces."
                      }
                    },
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ],
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ],
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      }
                    },
                    "accessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "allowedValues": [
                        "Hot",
                        "Cool"
                      ],
                      "metadata": {
                        "description": "Optional. Storage Account Access Tier."
                      }
                    },
                    "allowSharedKeyAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "metadata": {
                        "description": "Network ACLs object to apply to the storage account."
                      }
                    }
                  },
                  "variables": {
                    "maxNameLength": 24,
                    "storageNameValid": "[toLower(replace(parameters('name'), '-', ''))]",
                    "uniqueStorageName": "[if(greater(length(variables('storageNameValid')), variables('maxNameLength')), substring(variables('storageNameValid'), 0, variables('maxNameLength')), variables('storageNameValid'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-05-01",
                      "name": "[variables('uniqueStorageName')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "tags": "[union(parameters('tags'), createObject('displayName', variables('uniqueStorageName')))]",
                      "properties": {
                        "accessTier": "[parameters('accessTier')]",
                        "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "networkAcls": "[parameters('networkAcls')]",
                        "publicNetworkAccess": "Enabled",
                        "minimumTlsVersion": "TLS1_2"
                      }
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('uniqueStorageName'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[variables('uniqueStorageName')]"
                    },
                    "apiVersion": {
                      "type": "string",
                      "value": "2022-05-01"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "blobPrivateDnsZone",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[variables('spokeVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName'))]",
                        "registrationEnabled": false
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "11764475892009351978"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of A records to be added to the DNS Zone"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dnsARecord",
                        "count": "[length(parameters('aRecords'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                      "properties": {
                        "ttl": 60,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZonesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "filePrivateDnsZone",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('privatelink.file.{0}', environment().suffixes.storage)]"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[variables('spokeVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName'))]",
                        "registrationEnabled": false
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "11764475892009351978"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of A records to be added to the DNS Zone"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dnsARecord",
                        "count": "[length(parameters('aRecords'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                      "properties": {
                        "ttl": 60,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZonesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "functionAppPrivateDnsZone",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "privatelink.azurewebsites.net"
                  },
                  "virtualNetworkLinks": {
                    "value": [
                      {
                        "vnetName": "[variables('spokeVNetName')]",
                        "vnetId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks', variables('spokeVNetName'))]",
                        "registrationEnabled": false
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "11764475892009351978"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Private DNS Zone Service. For az private endpoints you might find info here: https://learn.microsoft.com/azure/private-link/private-endpoint-dns#azure-services-dns-zone-configuration"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain vnetName, vnetId, registrationEnabled"
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of A records to be added to the DNS Zone"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "copy": {
                        "name": "privateDnsZoneLink",
                        "count": "[length(parameters('virtualNetworkLinks'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-link', parameters('virtualNetworkLinks')[copyIndex()].vnetName))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": "[parameters('virtualNetworkLinks')[copyIndex()].registrationEnabled]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkLinks')[copyIndex()].vnetId]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "dnsARecord",
                        "count": "[length(parameters('aRecords'))]"
                      },
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('aRecords')[copyIndex()].name)]",
                      "properties": {
                        "ttl": 60,
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('aRecords')[copyIndex()].ipv4Address]"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "privateDnsZonesId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    }
                  }
                }
              }
            },
            {
              "copy": {
                "name": "storageBlobPrivateEndpoints",
                "count": "[length(variables('functionApps'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storageBlobPE-{0}', variables('functionApps')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[format('pep-{0}-blob', variables('functionApps')[copyIndex()].storageAccountName)]"
                  },
                  "snetId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                  },
                  "privateLinkServiceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.id.value]"
                  },
                  "subresource": {
                    "value": "blob"
                  },
                  "privateDnsZonesId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'blobPrivateDnsZone'), '2022-09-01').outputs.privateDnsZonesId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "2962096315837766157"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "snetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                      }
                    },
                    "subresource": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                      }
                    },
                    "privateDnsZonesId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                      }
                    },
                    "customNICName": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('snetId')]"
                        },
                        "customNetworkInterfaceName": "[parameters('customNICName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('pl-{0}', parameters('name'))]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subresource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "config1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'blobPrivateDnsZone')]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}', variables('functionApps')[copyIndex()].name))]"
              ]
            },
            {
              "copy": {
                "name": "storageFilePrivateEndpoints",
                "count": "[length(variables('functionApps'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('storageFilePE-{0}', variables('functionApps')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[format('pep-{0}-file', variables('functionApps')[copyIndex()].storageAccountName)]"
                  },
                  "snetId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                  },
                  "privateLinkServiceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.id.value]"
                  },
                  "subresource": {
                    "value": "file"
                  },
                  "privateDnsZonesId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'filePrivateDnsZone'), '2022-09-01').outputs.privateDnsZonesId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "2962096315837766157"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "snetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                      }
                    },
                    "subresource": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                      }
                    },
                    "privateDnsZonesId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                      }
                    },
                    "customNICName": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('snetId')]"
                        },
                        "customNetworkInterfaceName": "[parameters('customNICName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('pl-{0}', parameters('name'))]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subresource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "config1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'filePrivateDnsZone')]",
                "[resourceId('Microsoft.Resources/deployments', format('storage-{0}', variables('functionApps')[copyIndex()].name))]",
                "storageBlobPrivateEndpoints"
              ]
            },
            {
              "copy": {
                "name": "functionAppsDeployment",
                "count": "[length(variables('functionApps'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('functionApp-{0}', variables('functionApps')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "functionAppName": {
                    "value": "[variables('functionApps')[copyIndex()].name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "serverFarmResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('appServicePlan-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.resourceId.value]"
                  },
                  "hasPrivateEndpoint": {
                    "value": true
                  },
                  "sqlDBManagedIdentityClientId": {
                    "value": "[parameters('sqlDBManagedIdentityClientId')]"
                  },
                  "storageAccountName": {
                    "value": "[variables('functionApps')[copyIndex()].storageAccountName]"
                  },
                  "userAssignedIdentities": "[if(greater(length(parameters('userAssignedIdentities')), 0), createObject('value', createObject('type', 'UserAssigned', 'userAssignedIdentities', reduce(parameters('userAssignedIdentities'), createObject(), lambda('result', 'id', union(lambdaVariables('result'), createObject(format('{0}', lambdaVariables('id')), createObject())))))), createObject('value', createObject('type', 'SystemAssigned')))]",
                  "appInsightId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appInsights-harp-functions'), '2022-09-01').outputs.appInsResourceId.value]"
                  },
                  "kind": {
                    "value": "functionapp"
                  },
                  "virtualNetworkSubnetId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('functionAppSubnetName'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "8631707333714356031"
                    }
                  },
                  "parameters": {
                    "functionAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of your Function App."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "appSettings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Additional app settings."
                      }
                    },
                    "serverFarmResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the app service plan to use for the site."
                      }
                    },
                    "hasPrivateEndpoint": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional, default is false. If true, then a private endpoint must be assigned to the function app"
                      }
                    },
                    "sqlDBManagedIdentityClientId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Client ID of the managed identity to be used for the SQL DB connection string."
                      }
                    },
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "contentShareName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Azure Files share used for function content."
                      }
                    },
                    "runtime": {
                      "type": "string",
                      "defaultValue": "dotnet-isolated",
                      "allowedValues": [
                        "node",
                        "dotnet",
                        "java",
                        "dotnet-isolated"
                      ],
                      "metadata": {
                        "description": "Optional. Runtime for Function App."
                      }
                    },
                    "runtimeVersion": {
                      "type": "string",
                      "defaultValue": "~4",
                      "metadata": {
                        "description": "Optional. Runtime Version for Function App."
                      }
                    },
                    "dotnetVersion": {
                      "type": "string",
                      "defaultValue": "9.0",
                      "metadata": {
                        "description": "Optional. Dotnet framework version."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "appInsightId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the app insight to leverage for this resource."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "functionapp",
                        "functionapp,linux",
                        "app",
                        "app,linux",
                        "app,linux,container"
                      ],
                      "metadata": {
                        "description": "Required. Type of site to deploy."
                      }
                    },
                    "virtualNetworkSubnetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration. This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}."
                      }
                    }
                  },
                  "variables": {
                    "privateEndpointSettings": "[if(parameters('hasPrivateEndpoint'), createArray(createObject('name', 'WEBSITE_CONTENTOVERVNET', 'value', '1'), createObject('name', 'WEBSITE_VNET_ROUTE_ALL', 'value', '1'), createObject('name', 'WEBSITE_WEBDEPLOY_USE_SCM', 'value', 'true')), createArray())]",
                    "contentShareSettings": "[if(empty(parameters('contentShareName')), createArray(), createArray(createObject('name', 'WEBSITE_CONTENTSHARE', 'value', parameters('contentShareName'))))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/sites",
                      "apiVersion": "2024-04-01",
                      "name": "[parameters('functionAppName')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "identity": "[parameters('userAssignedIdentities')]",
                      "properties": {
                        "httpsOnly": true,
                        "publicNetworkAccess": "[if(parameters('hasPrivateEndpoint'), 'Disabled', 'Enabled')]",
                        "serverFarmId": "[parameters('serverFarmResourceId')]",
                        "virtualNetworkSubnetId": "[if(not(empty(parameters('virtualNetworkSubnetId'))), parameters('virtualNetworkSubnetId'), null())]",
                        "siteConfig": {
                          "netFrameworkVersion": "[parameters('dotnetVersion')]",
                          "appSettings": "[concat(createArray(createObject('name', 'AzureWebJobsStorage', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value)), createObject('name', 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', parameters('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2022-09-01').keys[0].value)), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', parameters('runtimeVersion')), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', parameters('runtime')), createObject('name', 'APPINSIGHTS_INSTRUMENTATIONKEY', 'value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('appInsightId'), '/')[2], split(parameters('appInsightId'), '/')[4]), 'Microsoft.Insights/components', last(split(parameters('appInsightId'), '/'))), '2020-02-02').InstrumentationKey), createObject('name', 'AZURE_CLIENT_ID', 'value', parameters('sqlDBManagedIdentityClientId'))), variables('privateEndpointSettings'), variables('contentShareSettings'), parameters('appSettings'))]",
                          "alwaysOn": true
                        }
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "functionAppName": {
                      "type": "string",
                      "value": "[parameters('functionAppName')]"
                    },
                    "functionAppId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
                    },
                    "defaultHostName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01').defaultHostName]"
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2024-04-01', 'full').identity, 'principalId'), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'appInsights-harp-functions')]",
                "[resourceId('Microsoft.Resources/deployments', format('appServicePlan-{0}', variables('functionApps')[copyIndex()].name))]",
                "storageAccounts"
              ]
            },
            {
              "copy": {
                "name": "functionAppPrivateEndpoints",
                "count": "[length(variables('functionApps'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('funcAppPE-{0}', variables('functionApps')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[format('pep-{0}', variables('functionApps')[copyIndex()].name)]"
                  },
                  "snetId": {
                    "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                  },
                  "privateLinkServiceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('functionApp-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.functionAppId.value]"
                  },
                  "subresource": {
                    "value": "sites"
                  },
                  "privateDnsZonesId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'functionAppPrivateDnsZone'), '2022-09-01').outputs.privateDnsZonesId.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.1.11899",
                      "templateHash": "2962096315837766157"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Name of your Private Endpoint. Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "snetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The subnet resource ID where the nic of the PE will be attached to"
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource id of private link service. The resource ID of the Az Resource that we need to attach the pe to."
                      }
                    },
                    "subresource": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource that the Private Endpoint will be attached to, as shown in https://learn.microsoft.com/azure/private-link/private-endpoint-overview#private-link-resource"
                      }
                    },
                    "privateDnsZonesId": {
                      "type": "string",
                      "metadata": {
                        "description": "Id of the relevant private DNS Zone, so that the PE can create an A record for the implicitly created nic"
                      }
                    },
                    "customNICName": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('snetId')]"
                        },
                        "customNetworkInterfaceName": "[parameters('customNICName')]",
                        "privateLinkServiceConnections": [
                          {
                            "name": "[format('pl-{0}', parameters('name'))]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('privateLinkServiceId')]",
                              "groupIds": [
                                "[parameters('subresource')]"
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'dnsgroupname')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "config1",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZonesId')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'functionAppPrivateDnsZone')]",
                "[resourceId('Microsoft.Resources/deployments', format('functionApp-{0}', variables('functionApps')[copyIndex()].name))]",
                "storageBlobPrivateEndpoints",
                "storageFilePrivateEndpoints"
              ]
            }
          ],
          "outputs": {
            "functionAppNames": {
              "type": "array",
              "copy": {
                "count": "[length(variables('functionApps'))]",
                "input": {
                  "name": "[variables('functionApps')[copyIndex()].name]",
                  "id": "[reference(resourceId('Microsoft.Resources/deployments', format('functionApp-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.functionAppId.value]",
                  "defaultHostName": "[reference(resourceId('Microsoft.Resources/deployments', format('functionApp-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.defaultHostName.value]"
                }
              }
            },
            "storageAccountNames": {
              "type": "array",
              "copy": {
                "count": "[length(variables('functionApps'))]",
                "input": {
                  "name": "[variables('functionApps')[copyIndex()].storageAccountName]",
                  "id": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.id.value]"
                }
              }
            },
            "appServicePlanNames": {
              "type": "array",
              "copy": {
                "count": "[length(variables('functionApps'))]",
                "input": {
                  "name": "[variables('functionApps')[copyIndex()].appServicePlanName]",
                  "id": "[reference(resourceId('Microsoft.Resources/deployments', format('appServicePlan-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.resourceId.value]"
                }
              }
            },
            "functionAppResourceIds": {
              "type": "array",
              "copy": {
                "count": "[length(variables('functionApps'))]",
                "input": "[reference(resourceId('Microsoft.Resources/deployments', format('functionApp-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.functionAppId.value]"
              }
            },
            "storageAccountResourceIds": {
              "type": "array",
              "copy": {
                "count": "[length(variables('functionApps'))]",
                "input": "[reference(resourceId('Microsoft.Resources/deployments', format('storage-{0}', variables('functionApps')[copyIndex()].name)), '2022-09-01').outputs.id.value]"
              }
            },
            "storageAccountNamesArray": {
              "type": "array",
              "copy": {
                "count": "[length(variables('functionApps'))]",
                "input": "[variables('functionApps')[copyIndex()].storageAccountName]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('harpSyncResourceGroupName')), 'Microsoft.Resources/deployments', 'deployHarpAppConfiguration')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('harpSyncResourceGroupName')), 'Microsoft.Resources/deployments', 'deployHarpSyncDatabase')]"
      ]
    }
  ]
}